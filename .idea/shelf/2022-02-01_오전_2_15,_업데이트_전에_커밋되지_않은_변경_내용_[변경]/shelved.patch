Index: src/main/java/com/example/weblogin/controller/UserPageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.controller;\r\n\r\nimport com.example.weblogin.config.auth.PrincipalDetails;\r\nimport com.example.weblogin.domain.cart.Cart;\r\nimport com.example.weblogin.domain.cartitem.CartItem;\r\nimport com.example.weblogin.domain.item.Item;\r\nimport com.example.weblogin.domain.orderitem.OrderItem;\r\nimport com.example.weblogin.domain.saleitem.SaleItem;\r\nimport com.example.weblogin.domain.user.User;\r\nimport com.example.weblogin.service.*;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n// 구매자에 해당하는 페이지 관리\r\n// 마이페이지, 회원정보수정, 장바구니, 주문, 주문취소\r\n\r\n@RequiredArgsConstructor\r\n@Controller\r\npublic class UserPageController {\r\n\r\n    private final UserPageService userPageService;\r\n    private final CartService cartService;\r\n    private final ItemService itemService;\r\n    private final OrderService orderService;\r\n    private final SaleService saleService;\r\n\r\n    // 유저 페이지 접속\r\n    @GetMapping(\"/user/{id}\")\r\n    public String userPage(@PathVariable(\"id\") Integer id, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        // 로그인이 되어있는 유저의 id와 유저 페이지에 접속하는 id가 같아야 함\r\n        if (principalDetails.getUser().getId() == id) {\r\n\r\n            model.addAttribute(\"user\", userPageService.findUser(id));\r\n\r\n            return \"/user/userPage\";\r\n        } else {\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 회원 정보 수정\r\n    @GetMapping(\"/user/modify/{id}\")\r\n    public String userModify(@PathVariable(\"id\") Integer id, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        // 로그인이 되어있는 유저의 id와 수정페이지에 접속하는 id가 같아야 함\r\n        if (principalDetails.getUser().getId() == id) {\r\n\r\n            model.addAttribute(\"user\", userPageService.findUser(id));\r\n\r\n            return \"/userModify\";\r\n        } else {\r\n            return \"redirect:/main\";\r\n        }\r\n\r\n    }\r\n\r\n    // 수정 실행\r\n    @PostMapping(\"/user/update/{id}\")\r\n    public String userUpdate(@PathVariable(\"id\") Integer id, User user) {\r\n\r\n        userPageService.userModify(user);\r\n\r\n        return \"redirect:/user/{id}\";\r\n    }\r\n\r\n    // 장바구니 페이지 접속\r\n    @GetMapping(\"/user/cart/{id}\")\r\n    public String userCartPage(@PathVariable(\"id\") Integer id, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        // 로그인이 되어있는 유저의 id와 장바구니에 접속하는 id가 같아야 함\r\n        if (principalDetails.getUser().getId() == id) {\r\n            // 로그인 되어 있는 유저에 해당하는 장바구니 가져오기\r\n            Cart userCart = principalDetails.getUser().getCart();\r\n\r\n            // 장바구니에 들어있는 아이템 모두 가져오기\r\n            List<CartItem> cartItemList = cartService.allUserCartView(userCart);\r\n\r\n            // 장바구니에 들어있는 상품들의 총 가격\r\n            int totalPrice = 0;\r\n            for (CartItem cartitem : cartItemList) {\r\n                totalPrice += cartitem.getCount() * cartitem.getItem().getPrice();\r\n            }\r\n\r\n            // 총 개수 += 수량\r\n            int totalCount = 0;\r\n            for (CartItem cartitem : cartItemList) {\r\n                totalCount += cartitem.getCount();\r\n            }\r\n            userCart.setCount(totalCount);\r\n\r\n            model.addAttribute(\"totalPrice\", totalPrice);\r\n            model.addAttribute(\"totalCount\", totalCount);\r\n            model.addAttribute(\"cartItems\", cartItemList);\r\n            model.addAttribute(\"user\", userPageService.findUser(id));\r\n\r\n            return \"/user/userCart\";\r\n        }\r\n        // 로그인 id와 장바구니 접속 id가 같지 않는 경우\r\n        else {\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 장바구니에 물건 넣기\r\n    @PostMapping(\"/user/cart/{id}/{itemId}\")\r\n    public String addCartItem(@PathVariable(\"id\") Integer id, @PathVariable(\"itemId\") Integer itemId, int amount) {\r\n\r\n        User user = userPageService.findUser(id);\r\n        Item item = itemService.itemView(itemId);\r\n\r\n        cartService.addCart(user, item, amount);\r\n\r\n        return \"redirect:/item/view/{itemId}\";\r\n    }\r\n\r\n    // 장바구니에서 물건 삭제\r\n    // 삭제하고 남은 총액 다시 계산해서 모델로 보내기 = 장바구니 등록 로직이랑 같음\r\n    // 삭제하고 남은 상품의 총 개수\r\n    @GetMapping(\"/user/cart/{id}/{cartItemId}/delete\")\r\n    public String deleteCartItem(@PathVariable(\"id\") Integer id, @PathVariable(\"cartItemId\") Integer itemId, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        // 로그인 유저 id와 장바구니 유저의 id가 같아야 함\r\n        if (principalDetails.getUser().getId() == id) {\r\n            // 장바구니 물건 삭제\r\n            cartService.cartItemDelete(itemId);\r\n\r\n            // 해당 유저의 카트 찾기\r\n            Cart userCart = cartService.findUserCart(id);\r\n\r\n            // 해당 유저의 장바구니 상품들\r\n            List<CartItem> cartItemList = cartService.allUserCartView(userCart);\r\n\r\n            // 총 가격 += 수량 * 가격\r\n            int totalPrice = 0;\r\n            for (CartItem cartitem : cartItemList) {\r\n                totalPrice += cartitem.getCount() * cartitem.getItem().getPrice();\r\n            }\r\n\r\n            // 총 개수 += 수량\r\n            int totalCount = 0;\r\n            for (CartItem cartitem : cartItemList) {\r\n                totalCount += cartitem.getCount();\r\n            }\r\n            userCart.setCount(totalCount);\r\n\r\n            model.addAttribute(\"totalPrice\", totalPrice);\r\n            model.addAttribute(\"totalCount\", totalCount);\r\n            model.addAttribute(\"cartItems\", cartItemList);\r\n            model.addAttribute(\"user\", userPageService.findUser(id));\r\n\r\n            return \"/user/userCart\";\r\n        }\r\n        // 로그인 id와 장바구니 삭제하려는 유저의 id가 같지 않는 경우\r\n        else {\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 주문 내역 조회 페이지\r\n    @GetMapping(\"/user/orderHist/{id}\")\r\n    public String orderList(@PathVariable(\"id\") Integer id, @AuthenticationPrincipal PrincipalDetails principalDetails, Model model) {\r\n        // 로그인이 되어있는 유저의 id와 주문 내역에 접속하는 id가 같아야 함\r\n        if (principalDetails.getUser().getId() == id) {\r\n\r\n            // 로그인 되어 있는 유저에 해당하는 구매내역 가져오기\r\n            List<OrderItem> orderItemList = orderService.findUserOrderItems(id);\r\n\r\n            // 총 주문 개수 += 수량\r\n            int totalCount = 0;\r\n            for (OrderItem orderItem : orderItemList) {\r\n                if (orderItem.getIsCancel() != 1)\r\n                    totalCount += orderItem.getOrderCount();\r\n            }\r\n\r\n            model.addAttribute(\"totalCount\", totalCount);\r\n            model.addAttribute(\"orderItems\", orderItemList);\r\n            model.addAttribute(\"user\", userPageService.findUser(id));\r\n\r\n            return \"user/userOrderList\";\r\n        }\r\n        // 로그인 id와 주문 내역 접속 id가 같지 않는 경우\r\n        else {\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 장바구니 상품 전체 주문\r\n    @Transactional\r\n    @PostMapping(\"/user/cart/checkout/{id}\")\r\n    public String cartCheckout(@PathVariable(\"id\") Integer id, @AuthenticationPrincipal PrincipalDetails principalDetails, Model model) {\r\n        // 로그인이 되어있는 유저의 id와 주문하는 id가 같아야 함\r\n        if(principalDetails.getUser().getId() == id) {\r\n            User user = userPageService.findUser(id);\r\n\r\n            // 유저 카트 찾기\r\n            Cart userCart = cartService.findUserCart(user.getId());\r\n\r\n            // 유저 카트 안에 있는 상품들\r\n            List<CartItem> userCartItems = cartService.allUserCartView(userCart);\r\n\r\n            // 최종 결제 금액\r\n            int totalPrice = 0;\r\n            for (CartItem cartItem : userCartItems) {\r\n                // 장바구니 안에 있는 상품의 재고가 없거나 재고보다 많이 주문할 경우\r\n                if (cartItem.getItem().getStock() == 0 || cartItem.getItem().getStock() < cartItem.getCount()) {\r\n                    return \"redirect:/main\";\r\n                }\r\n                totalPrice += cartItem.getCount() * cartItem.getItem().getPrice();\r\n            }\r\n\r\n            int userCoin = user.getCoin();\r\n            // 유저의 현재 잔액이 부족하다면\r\n            if (userCoin < totalPrice) {\r\n                return \"redirect:/main\";\r\n            } else {\r\n                // 유저 돈에서 최종 결제금액 빼야함\r\n                user.setCoin(user.getCoin() - totalPrice);\r\n\r\n                List<OrderItem> orderItemList = new ArrayList<>();\r\n\r\n                for (CartItem cartItem : userCartItems) {\r\n                    // 각 상품에 대한 판매자\r\n                    User seller = cartItem.getItem().getSeller();\r\n\r\n                    // 판매자 수익 증가\r\n                    seller.setCoin(seller.getCoin() + (cartItem.getCount() * cartItem.getItem().getPrice()));\r\n\r\n                    // 재고 감소\r\n                    cartItem.getItem().setStock(cartItem.getItem().getStock() - cartItem.getCount());\r\n\r\n                    // 상품 개별로 판매 개수 증가\r\n                    cartItem.getItem().setCount(cartItem.getItem().getCount() + cartItem.getCount());\r\n\r\n                    // sale, saleItem 에 담기\r\n                    SaleItem saleItem = saleService.addSale(seller.getId(), cartItem.getItem(), cartItem.getCount());\r\n\r\n                    // order, orderItem 에 담기\r\n                    OrderItem orderItem = orderService.addCartOrder(id, cartItem.getItem(), cartItem.getCount(), saleItem);\r\n\r\n                    orderItemList.add(orderItem);\r\n                }\r\n\r\n                orderService.addOrder(user, orderItemList);\r\n\r\n                // 장바구니 상품 모두 삭제\r\n                cartService.allCartItemDelete(id);\r\n            }\r\n\r\n            model.addAttribute(\"totalPrice\", totalPrice);\r\n            model.addAttribute(\"cartItems\", userCartItems);\r\n            model.addAttribute(\"user\", userPageService.findUser(id));\r\n\r\n            return \"redirect:/user/cart/{id}\";\r\n        } else {\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 상품 개별 주문 -> 상품 상세페이지에서 구매하기 버튼으로 주문\r\n    @Transactional\r\n    @PostMapping(\"/user/{id}/checkout/{itemId}\")\r\n    public String checkout(@PathVariable(\"id\") Integer id, @PathVariable(\"itemId\") Integer itemId, @AuthenticationPrincipal PrincipalDetails principalDetails, Model model, int count) {\r\n        // 로그인이 되어있는 유저의 id와 주문하는 id가 같아야 함\r\n        if(principalDetails.getUser().getId() == id) {\r\n\r\n            User user = userPageService.findUser(id);\r\n            Item item = itemService.itemView(itemId);\r\n\r\n            // 상품의 재고가 0이거나 재고가 적은 경우\r\n            if (item.getStock() == 0 || item.getStock() < count) {\r\n                return \"redirect:/main\";\r\n            }\r\n\r\n            // 최종 결제 금액\r\n            int totalPrice = item.getPrice() * count;\r\n\r\n            int userCoin = user.getCoin();\r\n            // 유저의 현재 잔액이 부족하다면\r\n            if (userCoin < totalPrice) {\r\n                return \"redirect:/main\";\r\n            } else {\r\n                // 유저 돈에서 최종 결제금액 빼야함\r\n                user.setCoin(user.getCoin() - totalPrice);\r\n\r\n                // 판매자의 돈은 최종 결제금액만큼 늘어남\r\n                item.getSeller().setCoin(item.getSeller().getCoin() + totalPrice);\r\n\r\n                // 해당 상품들의 재고는 각각 구매한 수량만큼 줄어듬\r\n                item.setStock(item.getStock() - count);\r\n                item.setCount(item.getCount() + count);\r\n\r\n                // sale, saleItem 에 담기\r\n                SaleItem saleItem = saleService.addSale(item.getSeller().getId(), item, count);\r\n\r\n                // order, orderItem 에 담기\r\n                orderService.addOneItemOrder(id, item, count, saleItem);\r\n            }\r\n\r\n            return \"redirect:/user/orderHist/{id}\";\r\n        } else {\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 주문 취소 기능\r\n    @PostMapping(\"/user/{id}/checkout/cancel/{orderItemId}\")\r\n    public String cancelOrder(@PathVariable(\"id\") Integer id, @PathVariable(\"orderItemId\") Integer orderItemId, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        // 로그인이 되어있는 유저의 id와 주문 취소하는 유저의 id가 같아야 함\r\n        if (principalDetails.getUser().getId() == id) {\r\n            // 취소할 상품 찾기\r\n            OrderItem cancelItem= orderService.findOrderitem(orderItemId);\r\n            // 취소하는 유저 찾기\r\n            User user = userPageService.findUser(id);\r\n\r\n            // 주문 내역 총 개수에서 취소 상품 개수 줄어듬\r\n            List<OrderItem> orderItemList = orderService.findUserOrderItems(id);\r\n            int totalCount = 0;\r\n            for (OrderItem orderItem : orderItemList) {\r\n                totalCount += orderItem.getOrderCount();\r\n            }\r\n            totalCount = totalCount - cancelItem.getOrderCount();\r\n\r\n            orderService.orderCancel(user, cancelItem);\r\n\r\n            model.addAttribute(\"totalCount\", totalCount);\r\n            model.addAttribute(\"orderItems\", orderItemList);\r\n            model.addAttribute(\"user\", user);\r\n\r\n            return \"redirect:/user/orderHist/{id}\";\r\n\r\n        }\r\n        // 로그인 id와 주문취소하는 유저 id가 같지 않는 경우 취소 불가\r\n        else {\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/controller/UserPageController.java b/src/main/java/com/example/weblogin/controller/UserPageController.java
--- a/src/main/java/com/example/weblogin/controller/UserPageController.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/controller/UserPageController.java	(date 1643648324826)
@@ -76,8 +76,10 @@
     public String userCartPage(@PathVariable("id") Integer id, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {
         // 로그인이 되어있는 유저의 id와 장바구니에 접속하는 id가 같아야 함
         if (principalDetails.getUser().getId() == id) {
+
+            User user = userPageService.findUser(id);
             // 로그인 되어 있는 유저에 해당하는 장바구니 가져오기
-            Cart userCart = principalDetails.getUser().getCart();
+            Cart userCart = user.getCart();
 
             // 장바구니에 들어있는 아이템 모두 가져오기
             List<CartItem> cartItemList = cartService.allUserCartView(userCart);
@@ -88,15 +90,8 @@
                 totalPrice += cartitem.getCount() * cartitem.getItem().getPrice();
             }
 
-            // 총 개수 += 수량
-            int totalCount = 0;
-            for (CartItem cartitem : cartItemList) {
-                totalCount += cartitem.getCount();
-            }
-            userCart.setCount(totalCount);
-
             model.addAttribute("totalPrice", totalPrice);
-            model.addAttribute("totalCount", totalCount);
+            model.addAttribute("totalCount", userCart.getCount());
             model.addAttribute("cartItems", cartItemList);
             model.addAttribute("user", userPageService.findUser(id));
 
@@ -121,18 +116,23 @@
     }
 
     // 장바구니에서 물건 삭제
-    // 삭제하고 남은 총액 다시 계산해서 모델로 보내기 = 장바구니 등록 로직이랑 같음
     // 삭제하고 남은 상품의 총 개수
     @GetMapping("/user/cart/{id}/{cartItemId}/delete")
     public String deleteCartItem(@PathVariable("id") Integer id, @PathVariable("cartItemId") Integer itemId, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {
         // 로그인 유저 id와 장바구니 유저의 id가 같아야 함
         if (principalDetails.getUser().getId() == id) {
-            // 장바구니 물건 삭제
-            cartService.cartItemDelete(itemId);
+            // itemId로 장바구니 상품 찾기
+            CartItem cartItem = cartService.findCartItemById(itemId);
 
             // 해당 유저의 카트 찾기
             Cart userCart = cartService.findUserCart(id);
 
+            // 장바구니 전체 수량 감소
+            userCart.setCount(userCart.getCount()-cartItem.getCount());
+
+            // 장바구니 물건 삭제
+            cartService.cartItemDelete(itemId);
+
             // 해당 유저의 장바구니 상품들
             List<CartItem> cartItemList = cartService.allUserCartView(userCart);
 
@@ -143,14 +143,14 @@
             }
 
             // 총 개수 += 수량
-            int totalCount = 0;
-            for (CartItem cartitem : cartItemList) {
-                totalCount += cartitem.getCount();
-            }
-            userCart.setCount(totalCount);
+            //int totalCount = 0;
+            //for (CartItem cartitem : cartItemList) {
+            //    totalCount += cartitem.getCount();
+            //}
+
 
             model.addAttribute("totalPrice", totalPrice);
-            model.addAttribute("totalCount", totalCount);
+            model.addAttribute("totalCount", userCart.getCount());
             model.addAttribute("cartItems", cartItemList);
             model.addAttribute("user", userPageService.findUser(id));
 
@@ -171,11 +171,11 @@
             // 로그인 되어 있는 유저에 해당하는 구매내역 가져오기
             List<OrderItem> orderItemList = orderService.findUserOrderItems(id);
 
-            // 총 주문 개수 += 수량
+            // 총 주문 개수
             int totalCount = 0;
             for (OrderItem orderItem : orderItemList) {
                 if (orderItem.getIsCancel() != 1)
-                    totalCount += orderItem.getOrderCount();
+                    totalCount += orderItem.getItemCount();
             }
 
             model.addAttribute("totalCount", totalCount);
@@ -238,10 +238,10 @@
                     cartItem.getItem().setCount(cartItem.getItem().getCount() + cartItem.getCount());
 
                     // sale, saleItem 에 담기
-                    SaleItem saleItem = saleService.addSale(seller.getId(), cartItem.getItem(), cartItem.getCount());
+                    SaleItem saleItem = saleService.addSale(cartItem.getItem().getId(), seller.getId(), cartItem);
 
                     // order, orderItem 에 담기
-                    OrderItem orderItem = orderService.addCartOrder(id, cartItem.getItem(), cartItem.getCount(), saleItem);
+                    OrderItem orderItem = orderService.addCartOrder(cartItem.getItem().getId(), user.getId(), cartItem, saleItem);
 
                     orderItemList.add(orderItem);
                 }
@@ -299,7 +299,7 @@
                 SaleItem saleItem = saleService.addSale(item.getSeller().getId(), item, count);
 
                 // order, orderItem 에 담기
-                orderService.addOneItemOrder(id, item, count, saleItem);
+                orderService.addOneItemOrder(user.getId(), item, count, saleItem);
             }
 
             return "redirect:/user/orderHist/{id}";
@@ -322,9 +322,9 @@
             List<OrderItem> orderItemList = orderService.findUserOrderItems(id);
             int totalCount = 0;
             for (OrderItem orderItem : orderItemList) {
-                totalCount += orderItem.getOrderCount();
+                totalCount += orderItem.getItemCount();
             }
-            totalCount = totalCount - cancelItem.getOrderCount();
+            totalCount = totalCount - cancelItem.getItemCount();
 
             orderService.orderCancel(user, cancelItem);
 
Index: src/main/resources/templates/user/userCart.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/html\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n    <meta name=\"description\" content=\"\" />\r\n    <meta name=\"author\" content=\"\" />\r\n    <title th:text=\"|${user.getUsername()}의 장바구니|\">장바구니</title>\r\n    <!-- Favicon-->\r\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"../../../../../../../Downloads/startbootstrap-shop-item-gh-pages/assets/favicon.ico\" />\r\n    <!-- Bootstrap icons-->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\" rel=\"stylesheet\" />\r\n    <!-- Core theme CSS (includes Bootstrap)-->\r\n    <link href=\"/css/styles.css\" rel=\"stylesheet\" />\r\n    <style>\r\n        .bd-placeholder-img {\r\n            font-size: 1.125rem;\r\n            text-anchor: middle;\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            user-select: none;\r\n        }\r\n\r\n        @media (min-width: 768px) {\r\n            .bd-placeholder-img-lg {\r\n                font-size: 3.5rem;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<!-- Navigation-->\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div class=\"container px-4 px-lg-5\">\r\n        <a class=\"navbar-brand\" th:href=\"@{/main}\">연지의 쇼핑몰</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4\">\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/main}\">Home</a></li>\r\n            </ul>\r\n            <form class=\"d-flex\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재잔액 : ${user.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/user/cart/{id}(id=${user.getId()})}\">\r\n                    <i class=\"bi-cart-fill me-1\"></i>\r\n                    Cart\r\n                    <span class=\"badge bg-dark text-white ms-1 rounded-pill\" th:text=\"${user.getCart().getCount()}\">0</span>\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/user/{id}(id=${user.getId()})}\" th:text=\"|${user.getName()}님 환영합니다.|\">\r\n                    마이페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n</nav>\r\n<!---- Cart ---->\r\n<div class=\"container-fluid mt-3\">\r\n    <div class=\"row\">\r\n\r\n        <!-- SIDE BAR -->\r\n        <nav id=\"sidebarMenu\" class=\"col-md-3 col-lg-2 d-md-block bg-light sidebar collapse\">\r\n            <div class=\"position-sticky pt-3\">\r\n                <ul class=\"nav flex-column\">\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/user/{id}(id=${user.getId()})}\">\r\n                            <span data-feather=\"home\"></span>\r\n                            마이페이지\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/user/cart/{id}(id=${user.getId()})}\">\r\n                            <span data-feather=\"home\"></span>\r\n                            장바구니\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" th:href=\"@{/user/orderHist/{id}(id=${user.getId()})}\">\r\n                            <span data-feather=\"file\"></span>\r\n                            주문내역\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n        <main class=\"col-md-9 ms-sm-auto col-lg-10 px-md-4\">\r\n            <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                <h1 class=\"h2\">장바구니</h1>\r\n            </div>\r\n            <div class=\"table-responsive\">\r\n                <table class=\"table table-striped table-sm\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">번호</th>\r\n                        <th scope=\"col\">상품ID</th>\r\n                        <th scope=\"col\">상품명</th>\r\n                        <th scope=\"col\">수량</th>\r\n                        <th scope=\"col\">가격</th>\r\n                        <th scope=\"col\">담은날짜</th>\r\n                        <th scope=\"col\">삭제</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <tr th:each=\"cartItem, i: ${cartItems}\">\r\n                        <td th:text=\"${i.count}\">1</td>\r\n                        <td th:text=\"${cartItem.getItem().getId()}\">3번상품</td>\r\n                        <td th:text=\"${cartItem.getItem().getName()}\">상품명</td>\r\n                        <td th:text=\"${cartItem.getCount()}\">수량</td>\r\n                        <td th:text=\"${cartItem.getItem().getPrice() * cartItem.getCount()}\">가격</td>\r\n                        <td th:text=\"${cartItem.getCart().getCreateDate()}\">날짜</td>\r\n                        <td class=\"btn btn-outline-dark\"><a th:href=\"@{/user/cart/{id}/{cartItemId}/delete(id=${cartItem.getCart().getUser().id}, cartItemId=${cartItem.getId()})}\" style=\"text-decoration: none\">삭제</a></td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <hr>\r\n            <div class=\"row row-cols-1 row-cols-md-3 mb-3 text-center mt-3\">\r\n                <div class=\"col\">\r\n                    <div class=\"card mb-4 rounded-3 shadow-sm\">\r\n                        <div class=\"card-header py-3\">\r\n                            <h4 class=\"my-0 fw-normal\">총 수량</h4>\r\n                        </div>\r\n                        <form class=\"card-body\" method=\"post\">\r\n                            <h1 class=\"card-title pricing-card-title\" th:text=\"|${totalCount} 개|\">$0</h1>\r\n\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"row row-cols-1 row-cols-md-3 mb-3 text-center mt-3\">\r\n                <div class=\"col\">\r\n                    <div class=\"card mb-4 rounded-3 shadow-sm\">\r\n                        <div class=\"card-header py-3\">\r\n                            <h4 class=\"my-0 fw-normal\">총 결제금액</h4>\r\n                        </div>\r\n                        <form class=\"card-body\" th:action=\"@{/user/cart/checkout/{id}(id=${user.getId()})}\" method=\"post\">\r\n                            <h1 class=\"card-title pricing-card-title\" th:text=\"|${totalPrice} ₩|\">$0</h1>\r\n                            <ul class=\"list-unstyled mt-3 mb-4\">\r\n                                <li>잘못 담은 물건이 있는지 확인해보세요!</li>\r\n                            </ul>\r\n                            <button type=\"submit\" class=\"w-100 btn btn-lg btn-outline-primary\">구매하기</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    </div>\r\n</div>\r\n<footer class=\"my-5 pt-5 text-muted text-center text-small\">\r\n    <p class=\"mb-1\">&copy; 김연지 - 2022년 01월 쇼핑몰 프로젝트</p>\r\n</footer>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/user/userCart.html b/src/main/resources/templates/user/userCart.html
--- a/src/main/resources/templates/user/userCart.html	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/resources/templates/user/userCart.html	(date 1643648473452)
@@ -125,7 +125,7 @@
                             <h4 class="my-0 fw-normal">총 수량</h4>
                         </div>
                         <form class="card-body" method="post">
-                            <h1 class="card-title pricing-card-title" th:text="|${totalCount} 개|">$0</h1>
+                            <h1 class="card-title pricing-card-title" th:text="|${user.getCart().getCount()} 개|">$0</h1>
 
                         </form>
                     </div>
Index: src/main/resources/templates/itemView.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/html\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n    <meta name=\"description\" content=\"\" />\r\n    <meta name=\"author\" content=\"\" />\r\n    <title th:text=\"${item.getName()}\">타이틀 - 상품 이름</title>\r\n    <!-- Favicon-->\r\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"../../../../../../../Downloads/startbootstrap-shop-item-gh-pages/assets/favicon.ico\" />\r\n    <!-- Bootstrap icons-->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\" rel=\"stylesheet\" />\r\n    <!-- Core theme CSS (includes Bootstrap)-->\r\n    <link href=\"/css/styles.css\" rel=\"stylesheet\" />\r\n</head>\r\n<body>\r\n<!-- Navigation-->\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div class=\"container px-4 px-lg-5\">\r\n        <a class=\"navbar-brand\" th:href=\"@{/main}\" sec:authorize=\"isAuthenticated()\">연지의 쇼핑몰</a>\r\n        <a class=\"navbar-brand\" th:href=\"@{/}\" sec:authorize=\"!isAuthenticated()\">연지의 쇼핑몰</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4\">\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/main}\" sec:authorize=\"isAuthenticated()\">Home</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/}\" sec:authorize=\"!isAuthenticated()\">Home</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/item/new}\" sec:authorize=\"hasRole('ROLE_SELLER')\">Upload</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/seller/manage/{id}(id=${user.getId()})}\" sec:authorize=\"hasRole('ROLE_SELLER')\">Manage</a></li>\r\n\r\n            </ul>\r\n            <form th:action=\"@{/signin}\" sec:authorize=\"!isAuthenticated()\">\r\n                <button class=\"btn btn-outline-dark\" type=\"submit\">\r\n                    로그인\r\n                </button>\r\n            </form>\r\n            <form th:action=\"@{/signup}\" sec:authorize=\"!isAuthenticated()\">\r\n                <button class=\"btn btn-outline-dark\" type=\"submit\">\r\n                    회원가입\r\n                </button>\r\n            </form>\r\n\r\n            <form class=\"d-flex\" sec:authorize=\"hasRole('ROLE_USER')\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재잔액 : ${user.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/user/cart/{id}(id=${user.getId()})}\">\r\n                    <i class=\"bi-cart-fill me-1\"></i>\r\n                    Cart\r\n                    <span class=\"badge bg-dark text-white ms-1 rounded-pill\" th:text=\"${user.getCart().getCount()}\">0</span>\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/user/{id}(id=${user.getId()})}\" th:text=\"|${user.getName()}님 환영합니다.|\">\r\n                    마이페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n\r\n            <form class=\"d-flex\" sec:authorize=\"hasRole('ROLE_SELLER')\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재수익 : ${user.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/seller/{id}(id=${user.getId()})}\" th:text=\"|${user.getName()}님 환영합니다.|\">\r\n                    판매자 페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n</nav>\r\n<!-- Product section-->\r\n<section class=\"py-5\">\r\n    <div class=\"container px-4 px-lg-5 my-5\">\r\n        <div class=\"row gx-4 gx-lg-5 align-items-center\">\r\n            <div class=\"col-md-6\"><img class=\"card-img-top mb-5 mb-md-0\" th:src=\"@{${item.getImgPath()}}\" alt=\"...\" /></div>\r\n            <div class=\"col-md-6\">\r\n                <div class=\"small mb-1\" th:text=\"|판매자 : ${item.getSeller().getUsername()}|\">판매자 이름</div>\r\n                <div class=\"small mb-1\" th:text=\"|재고 : ${item.getStock()}개|\">재고</div>\r\n                <h1 class=\"display-5 fw-bolder\" th:text=\"${item.getName()}\">상품 이름</h1>\r\n                <div class=\"fs-5 mb-5\">\r\n                    <span th:text=\"|${item.getPrice()} 원|\">아이템 가격</span>\r\n                </div>\r\n                <p class=\"lead\" th:text=\"${item.getText()}\">아이템 설명</p>\r\n\r\n                <form class=\"d-flex\" sec:authorize=\"hasRole('ROLE_SELLER')\" th:if=\"${item.getSeller().getId()} == ${user.getId()}\">\r\n                    <div class=\"d-flex\">\r\n                        <a th:href=\"@{/item/modify/{id} (id=${item.getId()})}\">\r\n                            <button class=\"btn btn-outline-dark flex-shrink-0\" type=\"button\">\r\n                                상품 수정\r\n                            </button>\r\n                        </a>\r\n                        <a th:href=\"@{/item/delete/{id} (id=${item.getId()})}\">\r\n                            <button class=\"btn btn-outline-dark flex-shrink-0\" type=\"button\">\r\n                                상품 삭제\r\n                            </button>\r\n                        </a>\r\n                    </div>\r\n                </form>\r\n\r\n                <form class=\"d-flex\" sec:authorize=\"hasRole('ROLE_USER')\" th:action=\"@{/user/{id}/checkout/{itemId}(id=${user.id}, itemId=${item.id})}\" method=\"post\">\r\n                    <div class=\"d-flex\">\r\n                        <input class=\"form-control text-center me-3\" id=\"count\" name=\"count\" type=\"num\" value=\"1\"\r\n                               style=\"max-width: 3rem\"/>\r\n                        <button class=\"btn btn-outline-dark flex-shrink-0\" type=\"submit\">\r\n                                구매하기\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n                <form class=\"d-flex\" sec:authorize=\"hasRole('ROLE_USER')\" th:action=\"@{/user/cart/{id}/{itemId}(id=${user.id}, itemId=${item.id})}\" method=\"post\">\r\n                    <div class=\"d-flex\">\r\n                    <input class=\"form-control text-center me-3\" id=\"amount\" name=\"amount\" type=\"num\" value=\"1\"\r\n                               style=\"max-width: 3rem\"/>\r\n                        <button class=\"btn btn-outline-dark flex-shrink-0\" type=\"submit\">\r\n                            <i class=\"bi-cart-fill me-1\"></i>\r\n                            장바구니\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n\r\n                <form class=\"d-flex\" sec:authorize=\"!isAuthenticated()\">\r\n                    <div class=\"d-flex\">\r\n                        <a th:href=\"@{/signin}\">\r\n                            <button class=\"btn btn-outline-dark flex-shrink-0\" type=\"button\">\r\n                                구매하기\r\n                            </button>\r\n                        </a>\r\n                        <a class=\"btn btn-outline-dark\" th:href=\"@{/signin}\">\r\n                            <i class=\"bi-cart-fill me-1\"></i>\r\n                            장바구니\r\n                        </a>\r\n                    </div>\r\n                </form>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>\r\n<!-- Footer-->\r\n<footer class=\"my-5 pt-5 text-muted text-center text-small\">\r\n    <p class=\"mb-1\">&copy; 김연지 - 2022년 01월 쇼핑몰 프로젝트</p>\r\n</footer>\r\n<!-- Bootstrap core JS-->\r\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\r\n<!-- Core theme JS-->\r\n<script src=\"/js/scripts.js\"></script>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/itemView.html b/src/main/resources/templates/itemView.html
--- a/src/main/resources/templates/itemView.html	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/resources/templates/itemView.html	(date 1643649030334)
@@ -12,6 +12,13 @@
     <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css" rel="stylesheet" />
     <!-- Core theme CSS (includes Bootstrap)-->
     <link href="/css/styles.css" rel="stylesheet" />
+    <script>
+        if (item.getCount() < amount) {
+            alert("재고가 부족합니다.")
+        }
+
+    </script>
+
 </head>
 <body>
 <!-- Navigation-->
@@ -46,7 +53,7 @@
                 <a class="btn btn-outline-dark" th:href="@{/user/cart/{id}(id=${user.getId()})}">
                     <i class="bi-cart-fill me-1"></i>
                     Cart
-                    <span class="badge bg-dark text-white ms-1 rounded-pill" th:text="${user.getCart().getCount()}">0</span>
+                    <span class="badge bg-dark text-white ms-1 rounded-pill" th:text="${cartCount}">0</span>
                 </a>
                 <a class="btn btn-outline-dark" th:href="@{/user/{id}(id=${user.getId()})}" th:text="|${user.getName()}님 환영합니다.|">
                     마이페이지
@@ -109,7 +116,8 @@
                         </button>
                     </div>
                 </form>
-                <form class="d-flex" sec:authorize="hasRole('ROLE_USER')" th:action="@{/user/cart/{id}/{itemId}(id=${user.id}, itemId=${item.id})}" method="post">
+
+                <!--<form class="d-flex" sec:authorize="hasRole('ROLE_USER')" th:action="@{/user/cart/{id}/{itemId}(id=${user.id}, itemId=${item.id})}" method="post">
                     <div class="d-flex">
                     <input class="form-control text-center me-3" id="amount" name="amount" type="num" value="1"
                                style="max-width: 3rem"/>
@@ -118,26 +126,58 @@
                             장바구니
                         </button>
                     </div>
+                </form>-->
+
+
+                <form class="d-flex" sec:authorize="hasRole('ROLE_USER')" onsubmit="return additem();" th:action="@{/user/cart/{id}/{itemId}(id=${user.id}, itemId=${item.id})}" method="post">
+                    <input id="amount" name="amount" type="num" value="1">
+                    <button id="basket" type="submit">장바구니</button>
+                    <!--<div id="buy"></div>-->
                 </form>
+                    <script th:inline="javascript">
+                        /* <![CDATA[ */
+                        var leftitemcount = [[${item.Stock}]];
+                        const button = document.getElementById("basket")
+
+                        function additem() {
+                            var count = document.getElementById("amount").value
+                            if (isNaN(count)) {
+                                alert("숫자를 입력해주세요")
+                                return false
+                            } else if (count > leftitemcount) {
+                                alert("재고가 부족합니다")
+                                return false
+                            } else {
+                                <!--document.getElementById("buy").innerText = count-->
+                                return true
+                            }
+                        }
+
+                        <!--button.addEventListener("click",additem)-->
+                        /* ]]> */
+                    </script>
+
+
+
+
+
 
-                <form class="d-flex" sec:authorize="!isAuthenticated()">
-                    <div class="d-flex">
-                        <a th:href="@{/signin}">
-                            <button class="btn btn-outline-dark flex-shrink-0" type="button">
-                                구매하기
-                            </button>
-                        </a>
-                        <a class="btn btn-outline-dark" th:href="@{/signin}">
-                            <i class="bi-cart-fill me-1"></i>
-                            장바구니
-                        </a>
-                    </div>
-                </form>
-
-
-            </div>
-        </div>
-    </div>
+<form class="d-flex" sec:authorize="!isAuthenticated()">
+    <div class="d-flex">
+        <a th:href="@{/signin}">
+            <button class="btn btn-outline-dark flex-shrink-0" type="button">
+                구매하기
+            </button>
+        </a>
+        <a class="btn btn-outline-dark" th:href="@{/signin}">
+            <i class="bi-cart-fill me-1"></i>
+            장바구니
+        </a>
+    </div>
+</form>
+</div>
+</div>
+</div>
 </section>
 <!-- Footer-->
 <footer class="my-5 pt-5 text-muted text-center text-small">
Index: src/main/java/com/example/weblogin/domain/Board.java
===================================================================
diff --git a/src/main/java/com/example/weblogin/domain/Board.java b/src/main/java/com/example/weblogin/domain/Board.java
deleted file mode 100644
--- a/src/main/java/com/example/weblogin/domain/Board.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ /dev/null	(revision 3a692539f7fb354763e25255e67136a952bf817e)
@@ -1,26 +0,0 @@
-package com.example.weblogin.domain;
-
-import lombok.*;
-
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-
-@Builder
-@NoArgsConstructor
-@AllArgsConstructor
-@Getter
-@Setter
-@Entity
-public class Board {
-
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    private int id;
-
-    private String reviewTitle; // 후기 제목
-    private String reviewText; // 후기 내용
-    private String reviewWriter; // 후기 작성자
-    private String reviewImage; // 후기 사진
-}
Index: src/main/java/com/example/weblogin/domain/orderitem/OrderItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.domain.orderitem;\r\n\r\nimport com.example.weblogin.domain.item.Item;\r\nimport com.example.weblogin.domain.order.Order;\r\nimport com.example.weblogin.domain.saleitem.SaleItem;\r\nimport com.example.weblogin.domain.user.User;\r\nimport lombok.*;\r\n\r\nimport javax.persistence.*;\r\n\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Getter\r\n@Setter\r\n@Entity\r\npublic class OrderItem {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private int id;\r\n\r\n    @ManyToOne(fetch = FetchType.EAGER)\r\n    @JoinColumn(name=\"order_id\")\r\n    private Order order;\r\n\r\n    @ManyToOne(fetch = FetchType.EAGER)\r\n    @JoinColumn(name = \"user_id\")\r\n    private User user; // 구매자\r\n\r\n    @ManyToOne(fetch = FetchType.EAGER)\r\n    @JoinColumn(name=\"item_id\")\r\n    private Item item;\r\n\r\n    private int orderPrice; // 주문 가격\r\n    private int orderCount; // 수량\r\n\r\n    @OneToOne(fetch = FetchType.EAGER)\r\n    @JoinColumn(name=\"saleItem_id\")\r\n    private SaleItem saleItem; // 주문상품에 매핑되는 판매상품\r\n\r\n    private int isCancel; // 주문 취소 여부 (0:주문완료 / 1:주문취소)\r\n\r\n    public static OrderItem createOrderItem(User user, Item item, int count, SaleItem saleItem) {\r\n        OrderItem orderItem = new OrderItem();\r\n        orderItem.setItem(item);\r\n        orderItem.setUser(user);\r\n        orderItem.setOrderCount(count);\r\n        orderItem.setOrderPrice(item.getPrice());\r\n        orderItem.setSaleItem(saleItem);\r\n        return orderItem;\r\n    }\r\n\r\n    public static OrderItem createOrderItem(User user, Item item, int count, Order order, SaleItem saleItem) {\r\n        OrderItem orderItem = new OrderItem();\r\n        orderItem.setItem(item);\r\n        orderItem.setUser(user);\r\n        orderItem.setOrder(order);\r\n        orderItem.setOrderCount(count);\r\n        orderItem.setOrderPrice(item.getPrice());\r\n        orderItem.setSaleItem(saleItem);\r\n        return orderItem;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/domain/orderitem/OrderItem.java b/src/main/java/com/example/weblogin/domain/orderitem/OrderItem.java
--- a/src/main/java/com/example/weblogin/domain/orderitem/OrderItem.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/domain/orderitem/OrderItem.java	(date 1643561761366)
@@ -1,5 +1,6 @@
 package com.example.weblogin.domain.orderitem;
 
+import com.example.weblogin.domain.cartitem.CartItem;
 import com.example.weblogin.domain.item.Item;
 import com.example.weblogin.domain.order.Order;
 import com.example.weblogin.domain.saleitem.SaleItem;
@@ -28,12 +29,15 @@
     @JoinColumn(name = "user_id")
     private User user; // 구매자
 
-    @ManyToOne(fetch = FetchType.EAGER)
-    @JoinColumn(name="item_id")
-    private Item item;
+    //@ManyToOne(fetch = FetchType.EAGER)
+    //@JoinColumn(name="item_id")
+    //private Item item;
 
-    private int orderPrice; // 주문 가격
-    private int orderCount; // 수량
+    private int itemId; // 주문 상품 번호
+    private String itemName; // 주문 상품 이름
+    private int itemPrice; // 주문 상품 가격
+    private int itemCount; // 주문 상품 수량
+    private int itemTotalPrice; // 가격*수량
 
     @OneToOne(fetch = FetchType.EAGER)
     @JoinColumn(name="saleItem_id")
@@ -41,23 +45,29 @@
 
     private int isCancel; // 주문 취소 여부 (0:주문완료 / 1:주문취소)
 
-    public static OrderItem createOrderItem(User user, Item item, int count, SaleItem saleItem) {
+    // 장바구니 전체 주문
+    public static OrderItem createOrderItem(int itemId, User user, CartItem cartItem, SaleItem saleItem) {
         OrderItem orderItem = new OrderItem();
-        orderItem.setItem(item);
+        orderItem.setItemId(itemId);
         orderItem.setUser(user);
-        orderItem.setOrderCount(count);
-        orderItem.setOrderPrice(item.getPrice());
+        orderItem.setItemName(cartItem.getItem().getName());
+        orderItem.setItemPrice(cartItem.getItem().getPrice());
+        orderItem.setItemCount(cartItem.getCount());
+        orderItem.setItemTotalPrice(cartItem.getItem().getPrice()*cartItem.getCount());
         orderItem.setSaleItem(saleItem);
         return orderItem;
     }
 
-    public static OrderItem createOrderItem(User user, Item item, int count, Order order, SaleItem saleItem) {
+    // 상품 개별 주문
+    public static OrderItem createOrderItem(int itemId, User user, Item item, int count, Order order, SaleItem saleItem) {
         OrderItem orderItem = new OrderItem();
-        orderItem.setItem(item);
+        orderItem.setItemId(itemId);
         orderItem.setUser(user);
         orderItem.setOrder(order);
-        orderItem.setOrderCount(count);
-        orderItem.setOrderPrice(item.getPrice());
+        orderItem.setItemName(item.getName());
+        orderItem.setItemPrice(item.getPrice());
+        orderItem.setItemCount(count);
+        orderItem.setItemTotalPrice(item.getPrice()*count);
         orderItem.setSaleItem(saleItem);
         return orderItem;
     }
Index: src/main/java/com/example/weblogin/service/OrderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.service;\r\n\r\nimport com.example.weblogin.domain.item.Item;\r\nimport com.example.weblogin.domain.item.ItemRepository;\r\nimport com.example.weblogin.domain.order.Order;\r\nimport com.example.weblogin.domain.order.OrderRepository;\r\nimport com.example.weblogin.domain.orderitem.OrderItem;\r\nimport com.example.weblogin.domain.orderitem.OrderItemRepository;\r\nimport com.example.weblogin.domain.saleitem.SaleItem;\r\nimport com.example.weblogin.domain.saleitem.SaleItemRepository;\r\nimport com.example.weblogin.domain.user.User;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class OrderService {\r\n\r\n    private final OrderRepository orderRepository;\r\n    private final OrderItemRepository orderItemRepository;\r\n    private final UserPageService userPageService;\r\n    private final SaleItemRepository saleItemRepository;\r\n\r\n    // 회원가입 하면 회원 당 주문 하나 생성\r\n    public void createOrder(User user){\r\n\r\n        Order order = Order.createOrder(user);\r\n\r\n        orderRepository.save(order);\r\n    }\r\n\r\n    // id에 해당하는 주문아이템 찾기\r\n    public List<OrderItem> findUserOrderItems(int userId) {\r\n        return orderItemRepository.findOrderItemsByUserId(userId);\r\n    }\r\n\r\n    // OrderItem 하나 찾기\r\n    public OrderItem findOrderitem(int orderItemId) {return orderItemRepository.findOrderItemById(orderItemId);}\r\n\r\n    // 장바구니상품주문\r\n    @Transactional\r\n    public OrderItem addCartOrder(int userId, Item item, int count, SaleItem saleItem) {\r\n\r\n        User user = userPageService.findUser(userId);\r\n\r\n        OrderItem orderItem = OrderItem.createOrderItem(user, item, count, saleItem);\r\n\r\n        orderItemRepository.save(orderItem);\r\n\r\n        return orderItem;\r\n    }\r\n\r\n    // 주문하면 Order 만들기\r\n    @Transactional\r\n    public void addOrder(User user, List<OrderItem> orderItemList) {\r\n\r\n        Order userOrder = Order.createOrder(user, orderItemList);\r\n\r\n        orderRepository.save(userOrder);\r\n    }\r\n\r\n    // 단일 상품 주문\r\n    @Transactional\r\n    public void addOneItemOrder(int userId, Item item, int count, SaleItem saleItem) {\r\n\r\n        User user = userPageService.findUser(userId);\r\n\r\n        Order userOrder = Order.createOrder(user);\r\n\r\n        OrderItem orderItem = OrderItem.createOrderItem(user, item, count, userOrder, saleItem);\r\n\r\n        orderItemRepository.save(orderItem);\r\n        orderRepository.save(userOrder);\r\n    }\r\n\r\n    // 주문 취소 기능\r\n    @Transactional\r\n    public void orderCancel(User user, OrderItem cancelItem) {\r\n\r\n        System.out.println(\"userid = \"+user.getId()+\" cancelItemId = \"+cancelItem.getId());\r\n\r\n        // 판매자의 판매내역 totalCount 감소\r\n        cancelItem.getSaleItem().getSale().setTotalCount(cancelItem.getSaleItem().getSale().getTotalCount()-cancelItem.getOrderCount());\r\n\r\n        // 해당 item 재고 다시 증가\r\n        cancelItem.getItem().setStock(cancelItem.getItem().getStock()+ cancelItem.getOrderCount());\r\n\r\n        // 해당 item의 판매량 감소\r\n        cancelItem.getItem().setCount(cancelItem.getItem().getCount()-cancelItem.getOrderCount());\r\n\r\n        // 판매자 돈 감소\r\n        cancelItem.getSaleItem().getSeller().setCoin(cancelItem.getSaleItem().getSeller().getCoin()- cancelItem.getOrderPrice());\r\n\r\n        // 구매자 돈 증가\r\n        cancelItem.getUser().setCoin(cancelItem.getUser().getCoin()+ cancelItem.getOrderPrice());\r\n\r\n        // 해당 orderItem의 주문 상태 1로 변경 -> 주문 취소를 의미\r\n        cancelItem.setIsCancel(cancelItem.getIsCancel()+1);\r\n\r\n        // 해당 orderItem.getsaleItemId 로 saleItem 찾아서 판매 상태 1로 변경 -> 판매 취소를 의미\r\n        cancelItem.getSaleItem().setIsCancel(cancelItem.getSaleItem().getIsCancel()+1);\r\n\r\n        orderItemRepository.save(cancelItem);\r\n        saleItemRepository.save(cancelItem.getSaleItem());\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/service/OrderService.java b/src/main/java/com/example/weblogin/service/OrderService.java
--- a/src/main/java/com/example/weblogin/service/OrderService.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/service/OrderService.java	(date 1643561761413)
@@ -1,5 +1,6 @@
 package com.example.weblogin.service;
 
+import com.example.weblogin.domain.cartitem.CartItem;
 import com.example.weblogin.domain.item.Item;
 import com.example.weblogin.domain.item.ItemRepository;
 import com.example.weblogin.domain.order.Order;
@@ -23,6 +24,7 @@
     private final OrderItemRepository orderItemRepository;
     private final UserPageService userPageService;
     private final SaleItemRepository saleItemRepository;
+    private final ItemService itemService;
 
     // 회원가입 하면 회원 당 주문 하나 생성
     public void createOrder(User user){
@@ -42,11 +44,11 @@
 
     // 장바구니상품주문
     @Transactional
-    public OrderItem addCartOrder(int userId, Item item, int count, SaleItem saleItem) {
+    public OrderItem addCartOrder(int itemId, int userId, CartItem cartItem, SaleItem saleItem) {
 
         User user = userPageService.findUser(userId);
 
-        OrderItem orderItem = OrderItem.createOrderItem(user, item, count, saleItem);
+        OrderItem orderItem = OrderItem.createOrderItem(itemId, user, cartItem, saleItem);
 
         orderItemRepository.save(orderItem);
 
@@ -70,7 +72,7 @@
 
         Order userOrder = Order.createOrder(user);
 
-        OrderItem orderItem = OrderItem.createOrderItem(user, item, count, userOrder, saleItem);
+        OrderItem orderItem = OrderItem.createOrderItem(item.getId(), user, item, count, userOrder, saleItem);
 
         orderItemRepository.save(orderItem);
         orderRepository.save(userOrder);
@@ -80,22 +82,22 @@
     @Transactional
     public void orderCancel(User user, OrderItem cancelItem) {
 
-        System.out.println("userid = "+user.getId()+" cancelItemId = "+cancelItem.getId());
+        Item item = itemService.itemView(cancelItem.getItemId());
 
         // 판매자의 판매내역 totalCount 감소
-        cancelItem.getSaleItem().getSale().setTotalCount(cancelItem.getSaleItem().getSale().getTotalCount()-cancelItem.getOrderCount());
+        cancelItem.getSaleItem().getSale().setTotalCount(cancelItem.getSaleItem().getSale().getTotalCount()-cancelItem.getItemCount());
 
         // 해당 item 재고 다시 증가
-        cancelItem.getItem().setStock(cancelItem.getItem().getStock()+ cancelItem.getOrderCount());
+        item.setStock(item.getStock()+ cancelItem.getItemCount());
 
         // 해당 item의 판매량 감소
-        cancelItem.getItem().setCount(cancelItem.getItem().getCount()-cancelItem.getOrderCount());
+        item.setCount(item.getCount()-cancelItem.getItemCount());
 
         // 판매자 돈 감소
-        cancelItem.getSaleItem().getSeller().setCoin(cancelItem.getSaleItem().getSeller().getCoin()- cancelItem.getOrderPrice());
+        cancelItem.getSaleItem().getSeller().setCoin(cancelItem.getSaleItem().getSeller().getCoin()- cancelItem.getItemTotalPrice());
 
         // 구매자 돈 증가
-        cancelItem.getUser().setCoin(cancelItem.getUser().getCoin()+ cancelItem.getOrderPrice());
+        cancelItem.getUser().setCoin(cancelItem.getUser().getCoin()+ cancelItem.getItemTotalPrice());
 
         // 해당 orderItem의 주문 상태 1로 변경 -> 주문 취소를 의미
         cancelItem.setIsCancel(cancelItem.getIsCancel()+1);
Index: src/main/java/com/example/weblogin/domain/orderitem/OrderItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.domain.orderitem;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.List;\r\n\r\npublic interface OrderItemRepository extends JpaRepository<OrderItem, Integer> {\r\n\r\n    List<OrderItem> findOrderItemsByUserId(int userId);\r\n    List<OrderItem> findAll();\r\n    OrderItem findOrderItemById(int orderItemId);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/domain/orderitem/OrderItemRepository.java b/src/main/java/com/example/weblogin/domain/orderitem/OrderItemRepository.java
--- a/src/main/java/com/example/weblogin/domain/orderitem/OrderItemRepository.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/domain/orderitem/OrderItemRepository.java	(date 1643528856056)
@@ -1,11 +1,12 @@
 package com.example.weblogin.domain.orderitem;
 
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
 
 import java.util.List;
 
+@Repository
 public interface OrderItemRepository extends JpaRepository<OrderItem, Integer> {
-
     List<OrderItem> findOrderItemsByUserId(int userId);
     List<OrderItem> findAll();
     OrderItem findOrderItemById(int orderItemId);
Index: src/main/resources/templates/seller/itemModify.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <!-- CSS only -->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\r\n          integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\r\n    <title>상품 수정 페이지</title>\r\n</head>\r\n<body>\r\n<!-- Navigation-->\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div class=\"container px-4 px-lg-5\">\r\n        <a class=\"navbar-brand\" th:href=\"@{/main}\">연지의 쇼핑몰</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4\">\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/main}\">Home</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/item/new}\">Upload</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/seller/manage/{id}(id=${user.getId()})}\">Manage</a></li>\r\n\r\n                <!--<li class=\"nav-item dropdown\">\r\n                    <a class=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">Shop</a>\r\n                    <ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">All Products</a></li>\r\n                        <li><hr class=\"dropdown-divider\" /></li>\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">Popular Items</a></li>\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">New Arrivals</a></li>\r\n                    </ul>\r\n                </li>-->\r\n            </ul>\r\n            <form class=\"d-flex\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재수익 : ${user.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/seller/{id}(id=${user.getId()})}\" th:text=\"|${user.getName()}님 환영합니다.|\">\r\n                    판매자 페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</nav>\r\n<div class=\"container\">\r\n    <main>\r\n        <div class=\"py-5 text-center\">\r\n            <h2>상품 수정</h2>\r\n        </div>\r\n        <hr/>\r\n\r\n\r\n\r\n\r\n        <div class=\"col-md-7 col-lg-8\">\r\n            <form th:action=\"@{/item/modify/pro/{id}(id=${item.id})}\" method=\"post\">\r\n                <div class=\"row g-3\">\r\n                    <hr/>\r\n                    <div class=\"col-12\">\r\n                        <label class=\"form-label\">상품 상태</label>\r\n                        <select name=\"isSoldout\">\r\n                            <option value=\"\">선택</option>\r\n                            <option value=\"SELL\">판매중</option>\r\n                            <option value=\"SOLDOUT\">품절</option>\r\n                        </select>\r\n                        <div class=\"invalid-feedback\">\r\n                            Input is empty.\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"col-12\">\r\n                        <label for=\"itemName\" class=\"form-label\">상품 이름</label>\r\n                        <input type=\"text\" class=\"form-control\" id=\"itemName\" name=\"itemName\" th:placeholder=\"${item.getName()}\">\r\n                        <div class=\"invalid-feedback\">\r\n                            Your name is required.\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"col-12\">\r\n                        <label for=\"itemText\" class=\"form-label\">상품 설명</label>\r\n                        <input type=\"text\" class=\"form-control\" name=\"itemText\" id=\"itemText\" th:placeholder=\"${item.getText()}\">\r\n                        <div class=\"invalid-feedback\">\r\n                            Input is empty.\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"col-12\">\r\n                        <label for=\"itemPrice\" class=\"form-label\">상품 가격</label>\r\n                        <input type=\"text\" class=\"form-control\" id=\"itemPrice\" name=\"itemPrice\" th:placeholder=\"${item.getPrice()}\">\r\n                        <div class=\"invalid-feedback\">\r\n                            Input is empty.\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"col-12\">\r\n                        <label for=\"stock\" class=\"form-label\">상품 재고</label>\r\n                        <input type=\"text\" class=\"form-control\" id=\"stock\" name=\"stock\"\r\n                               th:placeholder=\"${item.getStock()}\">\r\n                        <div class=\"invalid-feedback\">\r\n                            Input is empty.\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"col-12\">\r\n                        <label for=\"imgName\" class=\"form-label\">상품 이미지 업로드</label>\r\n                        <input type=\"file\" class=\"form-control\" id=\"imgName\" name=\"imgName\">\r\n                        <div class=\"invalid-feedback\">\r\n                            Input is empty.\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <hr class=\"my-4\">\r\n                <button class=\"w-100 btn btn-primary btn-lg mb-3\" type=\"submit\">상품 수정</button>\r\n                <!--                    <button class=\"w-100 btn btn-secondary btn-lg\" th:href=\"@{memberlist}\">목록으로</button>-->\r\n            </form>\r\n        </div>\r\n    </main>\r\n\r\n    <footer class=\"my-5 pt-5 text-muted text-center text-small\">\r\n        <p class=\"mb-1\">&copy; 김연지 - 2022년 01월 쇼핑몰 프로젝트</p>\r\n    </footer>\r\n</div>\r\n\r\n</body>\r\n\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/seller/itemModify.html b/src/main/resources/templates/seller/itemModify.html
--- a/src/main/resources/templates/seller/itemModify.html	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/resources/templates/seller/itemModify.html	(date 1643531282109)
@@ -19,16 +19,6 @@
                 <li class="nav-item"><a class="nav-link active" aria-current="page" th:href="@{/main}">Home</a></li>
                 <li class="nav-item"><a class="nav-link" href="#" th:href="@{/item/new}">Upload</a></li>
                 <li class="nav-item"><a class="nav-link" href="#" th:href="@{/seller/manage/{id}(id=${user.getId()})}">Manage</a></li>
-
-                <!--<li class="nav-item dropdown">
-                    <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">Shop</a>
-                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
-                        <li><a class="dropdown-item" href="#!">All Products</a></li>
-                        <li><hr class="dropdown-divider" /></li>
-                        <li><a class="dropdown-item" href="#!">Popular Items</a></li>
-                        <li><a class="dropdown-item" href="#!">New Arrivals</a></li>
-                    </ul>
-                </li>-->
             </ul>
             <form class="d-flex">
                 <a class="btn btn-outline-dark" href="#" th:text="|현재수익 : ${user.getCoin()} ₩|">
@@ -50,10 +40,6 @@
             <h2>상품 수정</h2>
         </div>
         <hr/>
-
-
-
-
         <div class="col-md-7 col-lg-8">
             <form th:action="@{/item/modify/pro/{id}(id=${item.id})}" method="post">
                 <div class="row g-3">
@@ -69,8 +55,6 @@
                             Input is empty.
                         </div>
                     </div>
-
-
                     <div class="col-12">
                         <label for="itemName" class="form-label">상품 이름</label>
                         <input type="text" class="form-control" id="itemName" name="itemName" th:placeholder="${item.getName()}">
@@ -78,8 +62,6 @@
                             Your name is required.
                         </div>
                     </div>
-
-
                     <div class="col-12">
                         <label for="itemText" class="form-label">상품 설명</label>
                         <input type="text" class="form-control" name="itemText" id="itemText" th:placeholder="${item.getText()}">
@@ -87,7 +69,6 @@
                             Input is empty.
                         </div>
                     </div>
-
                     <div class="col-12">
                         <label for="itemPrice" class="form-label">상품 가격</label>
                         <input type="text" class="form-control" id="itemPrice" name="itemPrice" th:placeholder="${item.getPrice()}">
@@ -95,7 +76,6 @@
                             Input is empty.
                         </div>
                     </div>
-
                     <div class="col-12">
                         <label for="stock" class="form-label">상품 재고</label>
                         <input type="text" class="form-control" id="stock" name="stock"
@@ -104,7 +84,6 @@
                             Input is empty.
                         </div>
                     </div>
-
                     <div class="col-12">
                         <label for="imgName" class="form-label">상품 이미지 업로드</label>
                         <input type="file" class="form-control" id="imgName" name="imgName">
@@ -112,12 +91,9 @@
                             Input is empty.
                         </div>
                     </div>
-
                 </div>
-
                 <hr class="my-4">
                 <button class="w-100 btn btn-primary btn-lg mb-3" type="submit">상품 수정</button>
-                <!--                    <button class="w-100 btn btn-secondary btn-lg" th:href="@{memberlist}">목록으로</button>-->
             </form>
         </div>
     </main>
Index: src/main/java/com/example/weblogin/service/CartService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.service;\r\n\r\nimport com.example.weblogin.domain.cart.Cart;\r\nimport com.example.weblogin.domain.cart.CartRepository;\r\nimport com.example.weblogin.domain.cartitem.CartItem;\r\nimport com.example.weblogin.domain.cartitem.CartItemRepository;\r\nimport com.example.weblogin.domain.item.Item;\r\nimport com.example.weblogin.domain.item.ItemRepository;\r\nimport com.example.weblogin.domain.user.User;\r\nimport com.example.weblogin.domain.user.UserRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class CartService {\r\n\r\n    private final CartRepository cartRepository;\r\n    private final ItemRepository itemRepository;\r\n    private final CartItemRepository cartItemRepository;\r\n\r\n    // 회원가입 하면 회원당 카트 하나 생성\r\n    public void createCart(User user){\r\n\r\n        Cart cart = Cart.createCart(user);\r\n\r\n        cartRepository.save(cart);\r\n    }\r\n\r\n    // 장바구니 담기\r\n    @Transactional\r\n    public void addCart(User user, Item newItem, int amount) {\r\n\r\n        // 유저 id로 해당 유저의 장바구니 찾기\r\n        Cart cart = cartRepository.findByUserId(user.getId());\r\n\r\n        // 장바구니가 존재하지 않는다면\r\n        if (cart == null) {\r\n            cart = Cart.createCart(user);\r\n            cartRepository.save(cart);\r\n        }\r\n\r\n        Item item = itemRepository.findItemById(newItem.getId());\r\n        CartItem cartItem = cartItemRepository.findByCartIdAndItemId(cart.getId(), item.getId());\r\n\r\n        // 상품이 장바구니에 존재하지 않는다면 카트상품 생성 후 추가\r\n        if (cartItem == null) {\r\n            cartItem = CartItem.createCartItem(cart, item, amount);\r\n            cartItemRepository.save(cartItem);\r\n        }\r\n\r\n        // 상품이 장바구니에 이미 존재한다면 수량만 증가\r\n        else {\r\n            CartItem update = cartItem;\r\n            update.setCart(cartItem.getCart());\r\n            update.setItem(cartItem.getItem());\r\n            update.addCount(amount);\r\n            update.setCount(update.getCount());\r\n            cartItemRepository.save(update);\r\n        }\r\n\r\n        // 카트 상품 총 개수 증가\r\n        cart.setCount(cart.getCount()+amount);\r\n\r\n    }\r\n\r\n    // 유저 id로 해당 유저의 장바구니 찾기\r\n    public Cart findUserCart(int userId) {\r\n\r\n        return cartRepository.findCartByUserId(userId);\r\n\r\n    }\r\n\r\n    // 카트 상품 리스트 중 해당하는 유저가 담은 상품만 반환\r\n    // 유저의 카트 id와 카트상품의 카트 id가 같아야 함\r\n    public List<CartItem> allUserCartView(Cart userCart) {\r\n\r\n        // 유저의 카트 id를 꺼냄\r\n        int userCartId = userCart.getId();\r\n\r\n        // id에 해당하는 유저가 담은 상품들 넣어둘 곳\r\n        List<CartItem> UserCartItems = new ArrayList<>();\r\n\r\n        // 유저 상관 없이 카트에 있는 상품 모두 불러오기\r\n        List<CartItem> CartItems = cartItemRepository.findAll();\r\n\r\n        for(CartItem cartItem : CartItems) {\r\n            if(cartItem.getCart().getId() == userCartId) {\r\n                UserCartItems.add(cartItem);\r\n            }\r\n        }\r\n\r\n        return UserCartItems;\r\n    }\r\n\r\n    // 카트 상품 리스트 중 해당하는 상품 id의 상품만 반환\r\n    public List<CartItem> findCartItemByItemId(int id) {\r\n\r\n        List<CartItem> cartItems = cartItemRepository.findCartItemByItemId(id);\r\n\r\n        return cartItems;\r\n    }\r\n\r\n    // 장바구니의 상품 개별 삭제\r\n    public void cartItemDelete(int id) {\r\n\r\n        cartItemRepository.deleteById(id);\r\n    }\r\n\r\n    // 장바구니 아이템 전체 삭제 -> 매개변수는 유저 id\r\n    public void allCartItemDelete(int id) {\r\n\r\n        // 전체 cartItem 찾기\r\n        List<CartItem> cartItems = cartItemRepository.findAll();\r\n\r\n        // 반복문을 이용하여 해당하는 User 의 CartItem 만 찾아서 삭제\r\n        for(CartItem cartItem : cartItems){\r\n\r\n            if(cartItem.getCart().getUser().getId() == id) {\r\n\r\n                cartItem.getCart().setCount(0);\r\n\r\n                cartItemRepository.deleteById(cartItem.getId());\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/service/CartService.java b/src/main/java/com/example/weblogin/service/CartService.java
--- a/src/main/java/com/example/weblogin/service/CartService.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/service/CartService.java	(date 1643566744421)
@@ -105,6 +105,14 @@
         return cartItems;
     }
 
+    // 카트 상품 리스트 중 해당하는 상품 id의 상품만 반환
+    public CartItem findCartItemById(int id) {
+
+        CartItem cartItem = cartItemRepository.findCartItemById(id);
+
+        return cartItem;
+    }
+
     // 장바구니의 상품 개별 삭제
     public void cartItemDelete(int id) {
 
Index: src/main/java/com/example/weblogin/domain/cartitem/CartItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.domain.cartitem;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface CartItemRepository extends JpaRepository<CartItem, Integer> {\r\n    CartItem findByCartIdAndItemId(int cartId, int itemId);\r\n    List<CartItem> findCartItemByItemId(int id);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/domain/cartitem/CartItemRepository.java b/src/main/java/com/example/weblogin/domain/cartitem/CartItemRepository.java
--- a/src/main/java/com/example/weblogin/domain/cartitem/CartItemRepository.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/domain/cartitem/CartItemRepository.java	(date 1643566744435)
@@ -8,5 +8,6 @@
 @Repository
 public interface CartItemRepository extends JpaRepository<CartItem, Integer> {
     CartItem findByCartIdAndItemId(int cartId, int itemId);
+    CartItem findCartItemById(int id);
     List<CartItem> findCartItemByItemId(int id);
 }
Index: src/main/resources/templates/seller/saleList.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/html\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n    <meta name=\"description\" content=\"\" />\r\n    <meta name=\"author\" content=\"\" />\r\n    <title th:text=\"|${seller.getUsername()}의 판매내역|\">판매내역</title>\r\n    <!-- Favicon-->\r\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"../../../../../../../Downloads/startbootstrap-shop-item-gh-pages/assets/favicon.ico\" />\r\n    <!-- Bootstrap icons-->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\" rel=\"stylesheet\" />\r\n    <!-- Core theme CSS (includes Bootstrap)-->\r\n    <link href=\"/css/styles.css\" rel=\"stylesheet\" />\r\n    <style>\r\n        .bd-placeholder-img {\r\n            font-size: 1.125rem;\r\n            text-anchor: middle;\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            user-select: none;\r\n        }\r\n\r\n        @media (min-width: 768px) {\r\n            .bd-placeholder-img-lg {\r\n                font-size: 3.5rem;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<!-- Navigation-->\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div class=\"container px-4 px-lg-5\">\r\n        <a class=\"navbar-brand\" th:href=\"@{/main}\">연지의 쇼핑몰</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4\">\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/main}\">Home</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/item/new}\">Upload</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/seller/manage/{id}(id=${seller.getId()})}\">Manage</a></li>\r\n\r\n                <!--<li class=\"nav-item dropdown\">\r\n                    <a class=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">Shop</a>\r\n                    <ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">All Products</a></li>\r\n                        <li><hr class=\"dropdown-divider\" /></li>\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">Popular Items</a></li>\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">New Arrivals</a></li>\r\n                    </ul>\r\n                </li>-->\r\n            </ul>\r\n            <form class=\"d-flex\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재수익 : ${seller.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/seller/{id}(id=${seller.getId()})}\" th:text=\"|${seller.getName()}님 환영합니다.|\">\r\n                    판매자 페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</nav>\r\n<!---- Cart ---->\r\n<div class=\"container-fluid mt-3\">\r\n    <div class=\"row\">\r\n\r\n        <!-- SIDE BAR -->\r\n        <nav id=\"sidebarMenu\" class=\"col-md-3 col-lg-2 d-md-block bg-light sidebar collapse\">\r\n            <div class=\"position-sticky pt-3\">\r\n                <ul class=\"nav flex-column\">\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/seller/{id}(id=${seller.getId()})}\">\r\n                            <span data-feather=\"home\"></span>\r\n                            판매자페이지\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/seller/manage/{id}(id=${seller.getId()})}\">\r\n                            <span data-feather=\"home\"></span>\r\n                            상품관리\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" th:href=\"@{/seller/salelist/{id}(id=${seller.getId()})}\">\r\n                            <span data-feather=\"file\"></span>\r\n                            판매내역\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n\r\n\r\n\r\n\r\n        <main class=\"col-md-9 ms-sm-auto col-lg-10 px-md-4\">\r\n            <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                <h1 class=\"h2\">판매내역</h1>\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n                <table class=\"table table-striped table-sm\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">번호</th>\r\n                        <th scope=\"col\">상품ID</th>\r\n                        <th scope=\"col\">상품명</th>\r\n                        <th scope=\"col\">가격</th>\r\n                        <th scope=\"col\">판매량</th>\r\n                        <th scope=\"col\">판매수익</th>\r\n                        <th scope=\"col\">판매날짜</th>\r\n                        <th scope=\"col\">판매현황</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <tr th:each=\"saleItem, i: ${sellerSaleItems}\" >\r\n                        <td th:text=\"${i.count}\">1</td>\r\n                        <td th:text=\"${saleItem.getItem().getId()}\">3번상품</td>\r\n                        <td th:text=\"${saleItem.getItem().getName()}\">상품명</td>\r\n                        <td th:text=\"${saleItem.getItem().getPrice()}\">가격</td>\r\n                        <td th:text=\"${saleItem.getCount()}\">판매량</td>\r\n                        <td th:text=\"${saleItem.getItem().getPrice() * saleItem.getCount()}\">판매수익</td>\r\n                        <td th:text=\"${saleItem.getCreateDate()}\">판매날짜</td>\r\n                        <!--<td th:if=\"${saleItem.getIsCancel()} == 0\">판매완료</td>\r\n                        <td th:unless=\"${saleItem.getIsCancel()} == 1\">판매취소</td>-->\r\n                        <td th:text=\"${saleItem.getIsCancel()} == 0 ? '판매완료' : '판매취소'\">판매현황</td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <hr>\r\n            <div class=\"row row-cols-1 row-cols-md-3 mb-3 text-center mt-3\">\r\n                <div class=\"col\">\r\n                    <div class=\"card mb-4 rounded-3 shadow-sm\">\r\n                        <div class=\"card-header py-3\">\r\n                            <h4 class=\"my-0 fw-normal\">총 판매량</h4>\r\n                        </div>\r\n                        <form class=\"card-body\" method=\"post\">\r\n                            <h1 class=\"card-title pricing-card-title\" th:text=\"|${totalCount} 개|\">$0</h1>\r\n\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    </div>\r\n</div>\r\n<footer class=\"my-5 pt-5 text-muted text-center text-small\">\r\n    <p class=\"mb-1\">&copy; 김연지 - 2022년 01월 쇼핑몰 프로젝트</p>\r\n</footer>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/seller/saleList.html b/src/main/resources/templates/seller/saleList.html
--- a/src/main/resources/templates/seller/saleList.html	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/resources/templates/seller/saleList.html	(date 1643562043406)
@@ -39,16 +39,6 @@
                 <li class="nav-item"><a class="nav-link active" aria-current="page" th:href="@{/main}">Home</a></li>
                 <li class="nav-item"><a class="nav-link" href="#" th:href="@{/item/new}">Upload</a></li>
                 <li class="nav-item"><a class="nav-link" href="#" th:href="@{/seller/manage/{id}(id=${seller.getId()})}">Manage</a></li>
-
-                <!--<li class="nav-item dropdown">
-                    <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">Shop</a>
-                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
-                        <li><a class="dropdown-item" href="#!">All Products</a></li>
-                        <li><hr class="dropdown-divider" /></li>
-                        <li><a class="dropdown-item" href="#!">Popular Items</a></li>
-                        <li><a class="dropdown-item" href="#!">New Arrivals</a></li>
-                    </ul>
-                </li>-->
             </ul>
             <form class="d-flex">
                 <a class="btn btn-outline-dark" href="#" th:text="|현재수익 : ${seller.getCoin()} ₩|">
@@ -67,7 +57,6 @@
 <!---- Cart ---->
 <div class="container-fluid mt-3">
     <div class="row">
-
         <!-- SIDE BAR -->
         <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
             <div class="position-sticky pt-3">
@@ -93,10 +82,6 @@
                 </ul>
             </div>
         </nav>
-
-
-
-
         <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
             <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                 <h1 class="h2">판매내역</h1>
@@ -109,8 +94,8 @@
                         <th scope="col">번호</th>
                         <th scope="col">상품ID</th>
                         <th scope="col">상품명</th>
+                        <th scope="col">판매량</th>
                         <th scope="col">가격</th>
-                        <th scope="col">판매량</th>
                         <th scope="col">판매수익</th>
                         <th scope="col">판매날짜</th>
                         <th scope="col">판매현황</th>
@@ -119,14 +104,12 @@
                     <tbody>
                     <tr th:each="saleItem, i: ${sellerSaleItems}" >
                         <td th:text="${i.count}">1</td>
-                        <td th:text="${saleItem.getItem().getId()}">3번상품</td>
-                        <td th:text="${saleItem.getItem().getName()}">상품명</td>
-                        <td th:text="${saleItem.getItem().getPrice()}">가격</td>
-                        <td th:text="${saleItem.getCount()}">판매량</td>
-                        <td th:text="${saleItem.getItem().getPrice() * saleItem.getCount()}">판매수익</td>
+                        <td th:text="${saleItem.getItemId()}">3번상품</td>
+                        <td th:text="${saleItem.getItemName()}">상품명</td>
+                        <td th:text="${saleItem.getItemCount()}">판매량</td>
+                        <td th:text="${saleItem.getItemPrice()}">가격</td>
+                        <td th:text="${saleItem.getItemTotalPrice()}">판매수익</td>
                         <td th:text="${saleItem.getCreateDate()}">판매날짜</td>
-                        <!--<td th:if="${saleItem.getIsCancel()} == 0">판매완료</td>
-                        <td th:unless="${saleItem.getIsCancel()} == 1">판매취소</td>-->
                         <td th:text="${saleItem.getIsCancel()} == 0 ? '판매완료' : '판매취소'">판매현황</td>
                     </tr>
                     </tbody>
Index: src/main/resources/templates/user/userOrderList.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/html\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n    <meta name=\"description\" content=\"\" />\r\n    <meta name=\"author\" content=\"\" />\r\n    <title th:text=\"|${user.getUsername()}의 주문내역|\">주문내역</title>\r\n    <!-- Favicon-->\r\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"../../../../../../../Downloads/startbootstrap-shop-item-gh-pages/assets/favicon.ico\" />\r\n    <!-- Bootstrap icons-->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\" rel=\"stylesheet\" />\r\n    <!-- Core theme CSS (includes Bootstrap)-->\r\n    <link href=\"/css/styles.css\" rel=\"stylesheet\" />\r\n    <style>\r\n        .bd-placeholder-img {\r\n            font-size: 1.125rem;\r\n            text-anchor: middle;\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            user-select: none;\r\n        }\r\n\r\n        @media (min-width: 768px) {\r\n            .bd-placeholder-img-lg {\r\n                font-size: 3.5rem;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<!-- Navigation-->\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div class=\"container px-4 px-lg-5\">\r\n        <a class=\"navbar-brand\" th:href=\"@{/main}\">연지의 쇼핑몰</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4\">\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/main}\">Home</a></li>\r\n            </ul>\r\n            <form class=\"d-flex\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재잔액 : ${user.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/user/cart/{id}(id=${user.getId()})}\">\r\n                    <i class=\"bi-cart-fill me-1\"></i>\r\n                    Cart\r\n                    <span class=\"badge bg-dark text-white ms-1 rounded-pill\" th:text=\"${user.getCart().getCount()}\">0</span>\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/user/{id}(id=${user.getId()})}\" th:text=\"|${user.getName()}님 환영합니다.|\">\r\n                    마이페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n</nav>\r\n<!---- Cart ---->\r\n<div class=\"container-fluid mt-3\">\r\n    <div class=\"row\">\r\n\r\n        <!-- SIDE BAR -->\r\n        <nav id=\"sidebarMenu\" class=\"col-md-3 col-lg-2 d-md-block bg-light sidebar collapse\">\r\n            <div class=\"position-sticky pt-3\">\r\n                <ul class=\"nav flex-column\">\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/user/{id}(id=${user.getId()})}\">\r\n                            <span data-feather=\"home\"></span>\r\n                            마이페이지\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/user/cart/{id}(id=${user.getId()})}\">\r\n                            <span data-feather=\"home\"></span>\r\n                            장바구니\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" th:href=\"@{/user/orderHist/{id}(id=${user.getId()})}\">\r\n                            <span data-feather=\"file\"></span>\r\n                            주문내역\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n        <main class=\"col-md-9 ms-sm-auto col-lg-10 px-md-4\">\r\n            <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                <h1 class=\"h2\">주문내역</h1>\r\n            </div>\r\n            <div class=\"table-responsive\">\r\n                <table class=\"table table-striped table-sm\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">번호</th>\r\n                        <th scope=\"col\">상품ID</th>\r\n                        <th scope=\"col\">상품명</th>\r\n                        <th scope=\"col\">수량</th>\r\n                        <th scope=\"col\">가격</th>\r\n                        <th scope=\"col\">주문날짜</th>\r\n                        <th scope=\"col\">주문취소</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <tr th:each=\"orderItem, i: ${orderItems}\">\r\n                        <td th:text=\"${i.count}\">1</td>\r\n                        <td th:text=\"${orderItem.getItem().getId()}\">3번상품</td>\r\n                        <td th:text=\"${orderItem.getItem().getName()}\">상품명</td>\r\n                        <td th:text=\"${orderItem.getOrderCount()}\">수량</td>\r\n                        <td th:text=\"${orderItem.getItem().getPrice() * orderItem.getOrderCount()}\">가격</td>\r\n                        <td th:text=\"${orderItem.getOrder().getCreateDate()}\">날짜</td>\r\n                        <td th:if=\"${orderItem.getIsCancel()} == 1\">취소완료</a></td>\r\n                        <td th:unless=\"${orderItem.getIsCancel()} == 1\">\r\n                            <form th:action=\"@{/user/{id}/checkout/cancel/{orderItemId}(id=${user.id}, orderItemId=${orderItem.id})}\" th:method=\"POST\">\r\n                                <button type=\"submit\">주문취소</button>\r\n                            </form>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <hr>\r\n            <div class=\"row row-cols-1 row-cols-md-3 mb-3 text-center mt-3\">\r\n                <div class=\"col\">\r\n                    <div class=\"card mb-4 rounded-3 shadow-sm\">\r\n                        <div class=\"card-header py-3\">\r\n                            <h4 class=\"my-0 fw-normal\">총 주문량</h4>\r\n                        </div>\r\n                        <form class=\"card-body\" method=\"post\">\r\n                            <h1 class=\"card-title pricing-card-title\" th:text=\"|${totalCount} 개|\">$0</h1>\r\n\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    </div>\r\n</div>\r\n<footer class=\"my-5 pt-5 text-muted text-center text-small\">\r\n    <p class=\"mb-1\">&copy; 김연지 - 2022년 01월 쇼핑몰 프로젝트</p>\r\n</footer>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/user/userOrderList.html b/src/main/resources/templates/user/userOrderList.html
--- a/src/main/resources/templates/user/userOrderList.html	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/resources/templates/user/userOrderList.html	(date 1643562043390)
@@ -100,6 +100,7 @@
                         <th scope="col">상품명</th>
                         <th scope="col">수량</th>
                         <th scope="col">가격</th>
+                        <th scope="col">주문금액</th>
                         <th scope="col">주문날짜</th>
                         <th scope="col">주문취소</th>
                     </tr>
@@ -107,10 +108,11 @@
                     <tbody>
                     <tr th:each="orderItem, i: ${orderItems}">
                         <td th:text="${i.count}">1</td>
-                        <td th:text="${orderItem.getItem().getId()}">3번상품</td>
-                        <td th:text="${orderItem.getItem().getName()}">상품명</td>
-                        <td th:text="${orderItem.getOrderCount()}">수량</td>
-                        <td th:text="${orderItem.getItem().getPrice() * orderItem.getOrderCount()}">가격</td>
+                        <td th:text="${orderItem.getItemId()}">3번상품</td>
+                        <td th:text="${orderItem.getItemName()}">상품명</td>
+                        <td th:text="${orderItem.getItemCount()}">수량</td>
+                        <td th:text="${orderItem.getItemPrice()}">가격</td>
+                        <td th:text="${orderItem.getItemTotalPrice()}">주문금액</td>
                         <td th:text="${orderItem.getOrder().getCreateDate()}">날짜</td>
                         <td th:if="${orderItem.getIsCancel()} == 1">취소완료</a></td>
                         <td th:unless="${orderItem.getIsCancel()} == 1">
Index: src/main/java/com/example/weblogin/domain/item/ItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.domain.item;\r\n\r\nimport com.example.weblogin.domain.item.Item;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface ItemRepository extends JpaRepository<Item, Integer> {\r\n    Item findById(int id);\r\n    Item findItemById(int id);\r\n    Page<Item> findByNameContaining(String searchKeyword, Pageable pageable);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/domain/item/ItemRepository.java b/src/main/java/com/example/weblogin/domain/item/ItemRepository.java
--- a/src/main/java/com/example/weblogin/domain/item/ItemRepository.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/domain/item/ItemRepository.java	(date 1643553058154)
@@ -8,7 +8,6 @@
 
 @Repository
 public interface ItemRepository extends JpaRepository<Item, Integer> {
-    Item findById(int id);
     Item findItemById(int id);
     Page<Item> findByNameContaining(String searchKeyword, Pageable pageable);
 }
Index: src/main/java/com/example/weblogin/domain/order/OrderRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.domain.order;\r\n\r\nimport com.example.weblogin.domain.cart.Cart;\r\nimport com.example.weblogin.domain.item.Item;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.List;\r\n\r\npublic interface OrderRepository extends JpaRepository<Order, Integer> {\r\n\r\n    // 유저의 id에 해당하는 주문내역\r\n    Order findByUserId(int id);\r\n    Order findById(int id);\r\n    List<Order> findOrdersByUserId(int id);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/domain/order/OrderRepository.java b/src/main/java/com/example/weblogin/domain/order/OrderRepository.java
--- a/src/main/java/com/example/weblogin/domain/order/OrderRepository.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/domain/order/OrderRepository.java	(date 1643528856071)
@@ -3,13 +3,11 @@
 import com.example.weblogin.domain.cart.Cart;
 import com.example.weblogin.domain.item.Item;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
 
 import java.util.List;
 
+@Repository
 public interface OrderRepository extends JpaRepository<Order, Integer> {
-
-    // 유저의 id에 해당하는 주문내역
-    Order findByUserId(int id);
-    Order findById(int id);
     List<Order> findOrdersByUserId(int id);
 }
Index: src/main/java/com/example/weblogin/service/ItemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.service;\r\n\r\nimport com.example.weblogin.domain.cartitem.CartItem;\r\nimport com.example.weblogin.domain.item.Item;\r\nimport com.example.weblogin.domain.item.ItemRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.File;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\n\r\n@RequiredArgsConstructor\r\n@Service\r\npublic class ItemService {\r\n\r\n    private final ItemRepository itemRepository;\r\n    private final CartService cartService;\r\n\r\n    // 상품 등록\r\n    public void saveItem(Item item, MultipartFile imgFile) throws Exception {\r\n\r\n        String oriImgName = imgFile.getOriginalFilename();\r\n        String imgName = \"\";\r\n\r\n        String projectPath = System.getProperty(\"user.dir\") + \"/src/main/resources/static/files/\";\r\n\r\n        // UUID 를 이용하여 파일명 새로 생성\r\n        // UUID - 서로 다른 객체들을 구별하기 위한 클래스\r\n        UUID uuid = UUID.randomUUID();\r\n\r\n        String savedFileName = uuid + \"_\" + oriImgName; // 파일명 -> imgName\r\n\r\n        imgName = savedFileName;\r\n\r\n        File saveFile = new File(projectPath, imgName);\r\n\r\n        imgFile.transferTo(saveFile);\r\n\r\n        item.setImgName(imgName);\r\n        item.setImgPath(\"/files/\" + imgName);\r\n\r\n        itemRepository.save(item);\r\n    }\r\n\r\n    // 상품 개별 불러오기\r\n    public Item itemView(Integer id) {\r\n        return itemRepository.findById(id).get();\r\n    }\r\n\r\n    // 상품 리스트 불러오기\r\n    public List<Item> allItemView() {\r\n        return itemRepository.findAll();\r\n    }\r\n\r\n    // 상품 리스트 페이지용 불러오기\r\n    public Page<Item> allItemViewPage(Pageable pageable) {\r\n        return itemRepository.findAll(pageable);\r\n    }\r\n\r\n    // 상품 수정\r\n    @Transactional\r\n    public void itemModify(Item item, Integer id, MultipartFile imgFile) throws Exception {\r\n        String oriImgName = imgFile.getOriginalFilename();\r\n        String projectPath = System.getProperty(\"user.dir\") + \"/src/main/resources/static/files/\";\r\n        UUID uuid = UUID.randomUUID();\r\n        String extension = oriImgName.substring(oriImgName.lastIndexOf(\".\"));\r\n        String savedFileName = uuid.toString() + extension; // 파일명 -> imgName\r\n\r\n\r\n        File saveFile = new File(projectPath, savedFileName);\r\n        imgFile.transferTo(saveFile);\r\n\r\n        Item update = itemRepository.findItemById(id);\r\n        update.setName(item.getName());\r\n        update.setText(item.getText());\r\n        update.setPrice(item.getPrice());\r\n        update.setStock(item.getStock());\r\n        update.setImgName(savedFileName);\r\n        update.setImgPath(\"/files/\"+savedFileName);\r\n        itemRepository.save(update);\r\n\r\n    }\r\n\r\n    // 상품 삭제\r\n    @Transactional\r\n    public void itemDelete(Integer id) {\r\n        List<CartItem> items = cartService.findCartItemByItemId(id);\r\n        for(CartItem item : items) {\r\n            cartService.cartItemDelete(item.getId());\r\n        }\r\n        itemRepository.deleteById(id);\r\n    }\r\n\r\n    // 상품 검색\r\n    public Page<Item> itemSearchList(String searchKeyword, Pageable pageable) {\r\n\r\n        return itemRepository.findByNameContaining(searchKeyword, pageable);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/service/ItemService.java b/src/main/java/com/example/weblogin/service/ItemService.java
--- a/src/main/java/com/example/weblogin/service/ItemService.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/service/ItemService.java	(date 1643571264412)
@@ -3,6 +3,7 @@
 import com.example.weblogin.domain.cartitem.CartItem;
 import com.example.weblogin.domain.item.Item;
 import com.example.weblogin.domain.item.ItemRepository;
+import com.example.weblogin.domain.saleitem.SaleItem;
 import lombok.RequiredArgsConstructor;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -20,6 +21,7 @@
 
     private final ItemRepository itemRepository;
     private final CartService cartService;
+    private final SaleService saleService;
 
     // 상품 등록
     public void saveItem(Item item, MultipartFile imgFile) throws Exception {
@@ -42,6 +44,7 @@
         imgFile.transferTo(saveFile);
 
         item.setImgName(imgName);
+
         item.setImgPath("/files/" + imgName);
 
         itemRepository.save(item);
@@ -65,14 +68,11 @@
     // 상품 수정
     @Transactional
     public void itemModify(Item item, Integer id, MultipartFile imgFile) throws Exception {
-        String oriImgName = imgFile.getOriginalFilename();
+
         String projectPath = System.getProperty("user.dir") + "/src/main/resources/static/files/";
         UUID uuid = UUID.randomUUID();
-        String extension = oriImgName.substring(oriImgName.lastIndexOf("."));
-        String savedFileName = uuid.toString() + extension; // 파일명 -> imgName
-
-
-        File saveFile = new File(projectPath, savedFileName);
+        String fileName = uuid + "_" + imgFile.getOriginalFilename();
+        File saveFile = new File(projectPath, fileName);
         imgFile.transferTo(saveFile);
 
         Item update = itemRepository.findItemById(id);
@@ -80,19 +80,21 @@
         update.setText(item.getText());
         update.setPrice(item.getPrice());
         update.setStock(item.getStock());
-        update.setImgName(savedFileName);
-        update.setImgPath("/files/"+savedFileName);
+        update.setImgName(fileName);
+        update.setImgPath("/files/"+fileName);
         itemRepository.save(update);
-
     }
 
     // 상품 삭제
     @Transactional
     public void itemDelete(Integer id) {
+        // cartItem 중에 해당 id 를 가진 item 찾기
         List<CartItem> items = cartService.findCartItemByItemId(id);
+
         for(CartItem item : items) {
             cartService.cartItemDelete(item.getId());
         }
+
         itemRepository.deleteById(id);
     }
 
@@ -101,4 +103,5 @@
 
         return itemRepository.findByNameContaining(searchKeyword, pageable);
     }
+
 }
Index: src/main/java/com/example/weblogin/controller/AuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.controller;\r\n\r\nimport com.example.weblogin.domain.user.User;\r\nimport com.example.weblogin.service.AuthService;\r\nimport com.example.weblogin.web.dto.auth.SignupDto;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\n\r\n@RequiredArgsConstructor\r\n@Controller\r\npublic class AuthController {\r\n\r\n    private final AuthService authService;\r\n\r\n    @GetMapping(\"/signin\")\r\n    public String SigninForm() {\r\n        return \"signin\";\r\n    }\r\n\r\n    @GetMapping(\"/signup\")\r\n    public String SignupForm() {\r\n        return \"signup\";\r\n    }\r\n\r\n    @PostMapping(\"/signup\")\r\n    public String signup(SignupDto signupDto) {\r\n\r\n        // User에 signupDto 넣음\r\n        User user = signupDto.toEntity();\r\n\r\n        User userEntity = authService.signup(user);\r\n        System.out.println(userEntity);\r\n\r\n        return \"signin\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/controller/AuthController.java b/src/main/java/com/example/weblogin/controller/AuthController.java
--- a/src/main/java/com/example/weblogin/controller/AuthController.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/controller/AuthController.java	(date 1643564158495)
@@ -2,12 +2,17 @@
 
 import com.example.weblogin.domain.user.User;
 import com.example.weblogin.service.AuthService;
+import com.example.weblogin.service.CartService;
+import com.example.weblogin.service.OrderService;
+import com.example.weblogin.service.SaleService;
 import com.example.weblogin.web.dto.auth.SignupDto;
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PostMapping;
 
+import java.util.Objects;
+
 @RequiredArgsConstructor
 @Controller
 public class AuthController {
@@ -26,7 +31,6 @@
 
     @PostMapping("/signup")
     public String signup(SignupDto signupDto) {
-
         // User에 signupDto 넣음
         User user = signupDto.toEntity();
 
Index: src/main/java/com/example/weblogin/service/SaleService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.service;\r\n\r\nimport com.example.weblogin.domain.item.Item;\r\nimport com.example.weblogin.domain.item.ItemRepository;\r\nimport com.example.weblogin.domain.sale.Sale;\r\nimport com.example.weblogin.domain.sale.SaleRepository;\r\nimport com.example.weblogin.domain.saleitem.SaleItem;\r\nimport com.example.weblogin.domain.saleitem.SaleItemRepository;\r\nimport com.example.weblogin.domain.user.User;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class SaleService {\r\n\r\n    private final SaleRepository saleRepository;\r\n    private final UserPageService userPageService;\r\n    private final SaleItemRepository saleItemRepository;\r\n    private final ItemRepository itemRepository;\r\n\r\n    // 회원가입 하면 판매자 당 판매내역 하나 생성\r\n    public void createSale (User user){\r\n\r\n        Sale sale = Sale.createSale(user);\r\n\r\n        saleRepository.save(sale);\r\n    }\r\n\r\n    // id에 해당하는 판매아이템 찾기\r\n    public List<SaleItem> findSellerSaleItems (int sellerId) {\r\n\r\n        return saleItemRepository.findSaleItemsBySellerId(sellerId);\r\n    }\r\n\r\n    // 판매자 id에 해당하는 Sale 찾기\r\n    public Sale findSaleById (int sellerId) { return saleRepository.findBySellerId(sellerId); }\r\n\r\n    // 판매내역에 저장\r\n    @Transactional\r\n    public SaleItem addSale (int sellerId, Item sale_item, int count) {\r\n\r\n        User seller = userPageService.findUser(sellerId);\r\n        Sale sale = saleRepository.findBySellerId(sellerId);\r\n        sale.setTotalCount(sale.getTotalCount()+count);\r\n        saleRepository.save(sale);\r\n\r\n        Item item = itemRepository.findItemById(sale_item.getId());\r\n        SaleItem saleItem = SaleItem.createSaleItem(sale, seller, item, count);\r\n        saleItemRepository.save(saleItem);\r\n\r\n        return saleItem;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/service/SaleService.java b/src/main/java/com/example/weblogin/service/SaleService.java
--- a/src/main/java/com/example/weblogin/service/SaleService.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/service/SaleService.java	(date 1643564158511)
@@ -1,5 +1,6 @@
 package com.example.weblogin.service;
 
+import com.example.weblogin.domain.cartitem.CartItem;
 import com.example.weblogin.domain.item.Item;
 import com.example.weblogin.domain.item.ItemRepository;
 import com.example.weblogin.domain.sale.Sale;
@@ -40,17 +41,29 @@
     // 판매자 id에 해당하는 Sale 찾기
     public Sale findSaleById (int sellerId) { return saleRepository.findBySellerId(sellerId); }
 
-    // 판매내역에 저장
+    // 판매내역에 저장 (장바구니 전체 주문)
+    @Transactional
+    public SaleItem addSale (int itemId, int sellerId, CartItem cartItem) {
+
+        User seller = userPageService.findUser(sellerId);
+        Sale sale = saleRepository.findBySellerId(sellerId);
+        sale.setTotalCount(sale.getTotalCount()+cartItem.getCount());
+        saleRepository.save(sale);
+        SaleItem saleItem = SaleItem.createSaleItem(itemId, sale, seller, cartItem);
+        saleItemRepository.save(saleItem);
+
+        return saleItem;
+    }
+
+    // 판매내역에 저장 (상품 개별 주문)
     @Transactional
-    public SaleItem addSale (int sellerId, Item sale_item, int count) {
+    public SaleItem addSale (int sellerId, Item item, int count) {
 
         User seller = userPageService.findUser(sellerId);
         Sale sale = saleRepository.findBySellerId(sellerId);
         sale.setTotalCount(sale.getTotalCount()+count);
         saleRepository.save(sale);
-
-        Item item = itemRepository.findItemById(sale_item.getId());
-        SaleItem saleItem = SaleItem.createSaleItem(sale, seller, item, count);
+        SaleItem saleItem = SaleItem.createSaleItem(item.getId(), sale, seller, item, count);
         saleItemRepository.save(saleItem);
 
         return saleItem;
Index: src/main/resources/templates/seller/itemForm.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/html\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n    <meta name=\"description\" content=\"\" />\r\n    <meta name=\"author\" content=\"\" />\r\n    <title>상품등록</title>\r\n    <!-- Favicon-->\r\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"../../../../../../../Downloads/startbootstrap-shop-item-gh-pages/assets/favicon.ico\" />\r\n    <!-- Bootstrap icons-->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\" rel=\"stylesheet\" />\r\n    <!-- Core theme CSS (includes Bootstrap)-->\r\n    <link href=\"/css/styles.css\" rel=\"stylesheet\" />\r\n</head>\r\n<body>\r\n<!-- Navigation-->\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div class=\"container px-4 px-lg-5\">\r\n        <a class=\"navbar-brand\" th:href=\"@{/main}\">연지의 쇼핑몰</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4\">\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/main}\">Home</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/item/new}\">Upload</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/seller/manage/{id}(id=${user.getId()})}\">Manage</a></li>\r\n\r\n                <!--<li class=\"nav-item dropdown\">\r\n                    <a class=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">Shop</a>\r\n                    <ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">All Products</a></li>\r\n                        <li><hr class=\"dropdown-divider\" /></li>\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">Popular Items</a></li>\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">New Arrivals</a></li>\r\n                    </ul>\r\n                </li>-->\r\n            </ul>\r\n            <form class=\"d-flex\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재수익 : ${user.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/seller/{id}(id=${user.getId()})}\" th:text=\"|${user.getName()}님 환영합니다.|\">\r\n                    판매자 페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</nav>\r\n<!-- Product section-->\r\n<section class=\"py-5\">\r\n    <div class=\"container px-4 px-lg-5 my-5\">\r\n        <div class=\"row gx-4 gx-lg-5 align-items-center\">\r\n    <!--<div class=\"col-md-7 col-lg-8 container\">-->\r\n        <form th:action=\"@{/item/new/pro}\" method=\"post\" enctype=\"multipart/form-data\">\r\n            <div class=\"row g-3\">\r\n                <hr/>\r\n                <div class=\"col-12\">\r\n                    <label class=\"form-label\">상품 상태</label>\r\n                    <select name=\"isSoldout\">\r\n                        <option value=\"\">선택</option>\r\n                        <option value=\"SELL\">판매중</option>\r\n                        <option value=\"SOLDOUT\">품절</option>\r\n                    </select>\r\n                    <div class=\"invalid-feedback\">\r\n                        Input is empty.\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"col-12\">\r\n                    <label for=\"name\" class=\"form-label\">상품 이름</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" placeholder=\"상품 이름을 입력하세요.\">\r\n                    <div class=\"invalid-feedback\">\r\n                        Your name is required.\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"col-12\">\r\n                    <label for=\"text\" class=\"form-label\">상품 설명</label>\r\n                    <input type=\"text\" class=\"form-control\" name=\"text\" id=\"text\" placeholder=\"상품 설명을 입력하세요.\">\r\n                    <div class=\"invalid-feedback\">\r\n                        Input is empty.\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"col-12\">\r\n                    <label for=\"price\" class=\"form-label\">상품 가격</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"price\" name=\"price\" placeholder=\"상품 가격을 입력하세요.\">\r\n                    <div class=\"invalid-feedback\">\r\n                        Input is empty.\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"col-12\">\r\n                    <label for=\"stock\" class=\"form-label\">상품 재고</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"stock\" name=\"stock\"\r\n                           placeholder=\"상품 재고를 입력하세요.\">\r\n                    <div class=\"invalid-feedback\">\r\n                        Input is empty.\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"col-12\">\r\n                    <label for=\"text\" class=\"form-label\">상품 이미지 업로드</label>\r\n                    <input type=\"file\" class=\"form-control\" id=\"imgFile\" name=\"imgFile\">\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <hr class=\"my-4\">\r\n            <button class=\"w-100 btn btn-primary btn-lg mb-3\" type=\"submit\">상품 등록</button>\r\n            <!--                    <button class=\"w-100 btn btn-secondary btn-lg\" th:href=\"@{memberlist}\">목록으로</button>-->\r\n        </form>\r\n    </div>\r\n    </div>\r\n</section>\r\n\r\n<footer class=\"my-5 pt-5 text-muted text-center text-small\">\r\n    <p class=\"mb-1\">&copy; 김연지 - 2022년 01월 쇼핑몰 프로젝트</p>\r\n</footer>\r\n\r\n</body>\r\n\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/seller/itemForm.html b/src/main/resources/templates/seller/itemForm.html
--- a/src/main/resources/templates/seller/itemForm.html	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/resources/templates/seller/itemForm.html	(date 1643531282237)
@@ -24,16 +24,6 @@
                 <li class="nav-item"><a class="nav-link active" aria-current="page" th:href="@{/main}">Home</a></li>
                 <li class="nav-item"><a class="nav-link" href="#" th:href="@{/item/new}">Upload</a></li>
                 <li class="nav-item"><a class="nav-link" href="#" th:href="@{/seller/manage/{id}(id=${user.getId()})}">Manage</a></li>
-
-                <!--<li class="nav-item dropdown">
-                    <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">Shop</a>
-                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
-                        <li><a class="dropdown-item" href="#!">All Products</a></li>
-                        <li><hr class="dropdown-divider" /></li>
-                        <li><a class="dropdown-item" href="#!">Popular Items</a></li>
-                        <li><a class="dropdown-item" href="#!">New Arrivals</a></li>
-                    </ul>
-                </li>-->
             </ul>
             <form class="d-flex">
                 <a class="btn btn-outline-dark" href="#" th:text="|현재수익 : ${user.getCoin()} ₩|">
@@ -69,7 +59,6 @@
                     </div>
                 </div>
 
-
                 <div class="col-12">
                     <label for="name" class="form-label">상품 이름</label>
                     <input type="text" class="form-control" id="name" name="name" placeholder="상품 이름을 입력하세요.">
@@ -78,7 +67,6 @@
                     </div>
                 </div>
 
-
                 <div class="col-12">
                     <label for="text" class="form-label">상품 설명</label>
                     <input type="text" class="form-control" name="text" id="text" placeholder="상품 설명을 입력하세요.">
@@ -107,14 +95,10 @@
                 <div class="col-12">
                     <label for="text" class="form-label">상품 이미지 업로드</label>
                     <input type="file" class="form-control" id="imgFile" name="imgFile">
-
                 </div>
-
             </div>
-
             <hr class="my-4">
             <button class="w-100 btn btn-primary btn-lg mb-3" type="submit">상품 등록</button>
-            <!--                    <button class="w-100 btn btn-secondary btn-lg" th:href="@{memberlist}">목록으로</button>-->
         </form>
     </div>
     </div>
Index: src/main/java/com/example/weblogin/controller/ItemController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.controller;\r\n\r\nimport com.example.weblogin.config.auth.PrincipalDetails;\r\nimport com.example.weblogin.domain.item.Item;\r\nimport com.example.weblogin.domain.user.User;\r\nimport com.example.weblogin.service.ItemService;\r\nimport com.example.weblogin.service.UserPageService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.domain.Sort;\r\nimport org.springframework.data.web.PageableDefault;\r\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.util.List;\r\n\r\n@Controller\r\n@RequiredArgsConstructor\r\npublic class ItemController {\r\n\r\n    private final ItemService itemService;\r\n    private final UserPageService userPageService;\r\n\r\n    // 메인 페이지 html 하나로 통일\r\n    // 메인 페이지 (로그인 안 한 유저) /localhost:8080\r\n    @GetMapping(\"/\")\r\n    public String mainPageNoneLogin(Model model) {\r\n        // 로그인을 안 한 경우\r\n        List<Item> items = itemService.allItemView();\r\n        model.addAttribute(\"items\", items);\r\n\r\n        return \"/main\";\r\n    }\r\n\r\n    // 메인 페이지 (로그인 유저) - 어드민, 판매자, 구매자 로 로그인\r\n    @GetMapping(\"/main\")\r\n    public String mainPage(Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        if(principalDetails.getUser().getRole().equals(\"ROLE_ADMIN\") || principalDetails.getUser().getRole().equals(\"ROLE_SELLER\")) {\r\n            // 어드민, 판매자\r\n            int sellerId = principalDetails.getUser().getId();\r\n            List<Item> items = itemService.allItemView();\r\n            model.addAttribute(\"items\", items);\r\n            model.addAttribute(\"user\", userPageService.findUser(sellerId));\r\n\r\n            return \"/main\";\r\n        } else {\r\n            // 구매자\r\n            int userId = principalDetails.getUser().getId();\r\n            List<Item> items = itemService.allItemView();\r\n            model.addAttribute(\"items\", items);\r\n            model.addAttribute(\"user\", userPageService.findUser(userId));\r\n\r\n            return \"/main\";\r\n        }\r\n    }\r\n\r\n\r\n    // 상품 등록 페이지 - 어드민/판매자만 가능\r\n    @GetMapping(\"/item/new\")\r\n    public String itemSaveForm(@AuthenticationPrincipal PrincipalDetails principalDetails, Model model) {\r\n        if(principalDetails.getUser().getRole().equals(\"ROLE_ADMIN\") || principalDetails.getUser().getRole().equals(\"ROLE_SELLER\")) {\r\n            // 어드민, 판매자\r\n            model.addAttribute(\"user\", principalDetails.getUser());\r\n\r\n            return \"/seller/itemForm\";\r\n        } else {\r\n            // 일반 회원이면 거절 당해서 main으로 되돌아감\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 상품 등록 (POST) - 어드민/판매자만 가능\r\n    @PostMapping(\"/item/new/pro\")\r\n    public String itemSave(Item item, @AuthenticationPrincipal PrincipalDetails principalDetails, MultipartFile imgFile) throws Exception {\r\n        if(principalDetails.getUser().getRole().equals(\"ROLE_ADMIN\") || principalDetails.getUser().getRole().equals(\"ROLE_SELLER\")) {\r\n            // 어드민, 판매자\r\n            item.setSeller(principalDetails.getUser());\r\n            itemService.saveItem(item, imgFile);\r\n\r\n            return \"redirect:/main\";\r\n        } else {\r\n            // 일반 회원이면 거절 당해서 main으로 되돌아감\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 상품 수정 페이지 - 어드민/판매자만 가능\r\n    @GetMapping(\"/item/modify/{id}\")\r\n    public String itemModifyForm(@PathVariable(\"id\") Integer id, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        if(principalDetails.getUser().getRole().equals(\"ROLE_ADMIN\") || (principalDetails.getUser().getRole().equals(\"ROLE_SELLER\"))) {\r\n            // 어드민, 판매자\r\n            User user = itemService.itemView(id).getSeller();\r\n            // 상품을 올린 판매자 id와 현재 로그인 중인 판매자의 id가 같을 때\r\n            if(user.getId() == principalDetails.getUser().getId()) {\r\n\r\n                model.addAttribute(\"item\", itemService.itemView(id));\r\n                model.addAttribute(\"user\", principalDetails.getUser());\r\n\r\n\r\n                return \"/seller/itemModify\";\r\n            } else {\r\n                return \"redirect:/main\";\r\n            }\r\n        } else {\r\n            // 일반 회원이면 거절 당해서 main으로 되돌아감\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 상품 수정 (POST) - 어드민/판매자만 가능\r\n    @PostMapping(\"/item/modify/pro/{id}\")\r\n    public String itemModify(Item item, @PathVariable(\"id\") Integer id, @AuthenticationPrincipal PrincipalDetails principalDetails, MultipartFile imgFile) throws Exception{\r\n\r\n        if(principalDetails.getUser().getRole().equals(\"ROLE_ADMIN\") || (principalDetails.getUser().getRole().equals(\"ROLE_SELLER\"))) {\r\n            // 어드민, 판매자\r\n            User user = itemService.itemView(id).getSeller();\r\n\r\n            if(user.getId() == principalDetails.getUser().getId()) {\r\n                // 아이템 등록자와, 로그인 유저가 같으면 수정 진행\r\n                itemService.itemModify(item, id, imgFile);\r\n\r\n                return \"redirect:/main\";\r\n            } else {\r\n                return \"redirect:/main\";\r\n            }\r\n        } else {\r\n            // 일반 회원이면 거절 당해서 main으로 되돌아감\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 상품 상세 페이지 - 어드민, 판매자, 구매자 가능\r\n    @GetMapping(\"/item/view/{id}\")\r\n    public String ItemView(Model model, @PathVariable(\"id\") Integer id, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        if(principalDetails.getUser().getRole().equals(\"ROLE_SELLER\")) {\r\n            // 어드민, 판매자\r\n            model.addAttribute(\"item\", itemService.itemView(id));\r\n            model.addAttribute(\"user\", principalDetails.getUser());\r\n\r\n            return \"itemView\";\r\n        } else if (principalDetails.getUser().getRole().equals(\"ROLE_USER\")) {\r\n            // 일반 회원\r\n            model.addAttribute(\"item\", itemService.itemView(id));\r\n            model.addAttribute(\"user\", principalDetails.getUser());\r\n\r\n            return \"itemView\";\r\n        } else {\r\n            // 로그인 안 한 유저\r\n\r\n            model.addAttribute(\"item\", itemService.itemView(id));\r\n\r\n            return \"itemView\";\r\n\r\n        }\r\n    }\r\n\r\n    // 상품 상세 페이지 - 로그인 안 한 유저\r\n    @GetMapping(\"/item/view/nonlogin/{id}\")\r\n    public String nonLoginItemView(Model model, @PathVariable(\"id\") Integer id) {\r\n        // 로그인 안 한 유저\r\n        model.addAttribute(\"item\", itemService.itemView(id));\r\n        return \"itemView\";\r\n\r\n    }\r\n\r\n    // 상품 삭제 - 어드민, 판매자만 가능\r\n    @GetMapping(\"/item/delete/{id}\")\r\n    public String itemDelete(@PathVariable(\"id\") Integer id, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        if(principalDetails.getUser().getRole().equals(\"ROLE_SELLER\")) {\r\n            // 어드민, 판매자\r\n            User user = itemService.itemView(id).getSeller();\r\n\r\n            if(user.getId() == principalDetails.getUser().getId()) {\r\n\r\n                itemService.itemDelete(id);\r\n\r\n                return \"redirect:/main\";\r\n            } else {\r\n                return \"redirect:/main\";\r\n            }\r\n        } else {\r\n            // 일반 회원이면 거절 당해서 main으로 되돌아감\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 상품 리스트 페이지 - 로그인 유저\r\n    @GetMapping(\"/item/list\")\r\n    public String itemList(Model model, @PageableDefault(page = 0, size = 10, sort = \"id\", direction = Sort.Direction.ASC) Pageable pageable,\r\n                           String searchKeyword, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n\r\n        Page<Item> items = null;\r\n\r\n        if (searchKeyword == null) {  // 검색이 들어왔을 때\r\n            items = itemService.allItemViewPage(pageable);\r\n        } else {  // 검색이 들어오지 않았을 때\r\n            items = itemService.itemSearchList(searchKeyword, pageable);\r\n        }\r\n\r\n        int nowPage = items.getPageable().getPageNumber() + 1;\r\n        int startPage = Math.max(nowPage - 4, 1);\r\n        int endPage = Math.min(nowPage + 5, items.getTotalPages());\r\n\r\n        model.addAttribute(\"items\", items);\r\n        model.addAttribute(\"nowPage\", nowPage);\r\n        model.addAttribute(\"startPage\", startPage);\r\n        model.addAttribute(\"endPage\", endPage);\r\n        model.addAttribute(\"user\", principalDetails.getUser());\r\n\r\n        return \"itemList\";\r\n    }\r\n\r\n    // 상품 리스트 페이지 - 로그인 안 한 유저\r\n    @GetMapping(\"/nonlogin/item/list\")\r\n    public String itemList(Model model, @PageableDefault(page = 0, size = 10, sort = \"id\", direction = Sort.Direction.ASC) Pageable pageable,\r\n                           String searchKeyword) {\r\n\r\n        Page<Item> items = null;\r\n\r\n        if (searchKeyword == null) {  // 검색이 들어왔을 때\r\n            items = itemService.allItemViewPage(pageable);\r\n        } else {  // 검색이 들어오지 않았을 때\r\n            items = itemService.itemSearchList(searchKeyword, pageable);\r\n        }\r\n\r\n        int nowPage = items.getPageable().getPageNumber() + 1;\r\n        int startPage = Math.max(nowPage - 4, 1);\r\n        int endPage = Math.min(nowPage + 5, items.getTotalPages());\r\n\r\n        model.addAttribute(\"items\", items);\r\n        model.addAttribute(\"nowPage\", nowPage);\r\n        model.addAttribute(\"startPage\", startPage);\r\n        model.addAttribute(\"endPage\", endPage);\r\n\r\n        return \"itemList\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/controller/ItemController.java b/src/main/java/com/example/weblogin/controller/ItemController.java
--- a/src/main/java/com/example/weblogin/controller/ItemController.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/controller/ItemController.java	(date 1643568011116)
@@ -1,8 +1,11 @@
 package com.example.weblogin.controller;
 
 import com.example.weblogin.config.auth.PrincipalDetails;
+import com.example.weblogin.domain.cart.Cart;
+import com.example.weblogin.domain.cartitem.CartItem;
 import com.example.weblogin.domain.item.Item;
 import com.example.weblogin.domain.user.User;
+import com.example.weblogin.service.CartService;
 import com.example.weblogin.service.ItemService;
 import com.example.weblogin.service.UserPageService;
 import lombok.RequiredArgsConstructor;
@@ -26,6 +29,7 @@
 
     private final ItemService itemService;
     private final UserPageService userPageService;
+    private final CartService cartService;
 
     // 메인 페이지 html 하나로 통일
     // 메인 페이지 (로그인 안 한 유저) /localhost:8080
@@ -35,14 +39,14 @@
         List<Item> items = itemService.allItemView();
         model.addAttribute("items", items);
 
-        return "/main";
+        return "main";
     }
 
-    // 메인 페이지 (로그인 유저) - 어드민, 판매자, 구매자 로 로그인
+    // 메인 페이지 (로그인 유저) - 판매자, 구매자 로 로그인
     @GetMapping("/main")
     public String mainPage(Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {
-        if(principalDetails.getUser().getRole().equals("ROLE_ADMIN") || principalDetails.getUser().getRole().equals("ROLE_SELLER")) {
-            // 어드민, 판매자
+        if (principalDetails.getUser().getRole().equals("ROLE_SELLER")) {
+            // 판매자
             int sellerId = principalDetails.getUser().getId();
             List<Item> items = itemService.allItemView();
             model.addAttribute("items", items);
@@ -60,69 +64,66 @@
         }
     }
 
-
-    // 상품 등록 페이지 - 어드민/판매자만 가능
+    // 상품 등록 페이지 - 판매자만 가능
     @GetMapping("/item/new")
     public String itemSaveForm(@AuthenticationPrincipal PrincipalDetails principalDetails, Model model) {
-        if(principalDetails.getUser().getRole().equals("ROLE_ADMIN") || principalDetails.getUser().getRole().equals("ROLE_SELLER")) {
-            // 어드민, 판매자
+        if(principalDetails.getUser().getRole().equals("ROLE_SELLER")) {
+            // 판매자
             model.addAttribute("user", principalDetails.getUser());
 
             return "/seller/itemForm";
         } else {
-            // 일반 회원이면 거절 당해서 main으로 되돌아감
+            // 일반 회원이면 거절 -> main
             return "redirect:/main";
         }
     }
 
-    // 상품 등록 (POST) - 어드민/판매자만 가능
+    // 상품 등록 (POST) - 판매자만 가능
     @PostMapping("/item/new/pro")
     public String itemSave(Item item, @AuthenticationPrincipal PrincipalDetails principalDetails, MultipartFile imgFile) throws Exception {
-        if(principalDetails.getUser().getRole().equals("ROLE_ADMIN") || principalDetails.getUser().getRole().equals("ROLE_SELLER")) {
-            // 어드민, 판매자
+        if(principalDetails.getUser().getRole().equals("ROLE_SELLER")) {
+            // 판매자
             item.setSeller(principalDetails.getUser());
             itemService.saveItem(item, imgFile);
 
             return "redirect:/main";
         } else {
-            // 일반 회원이면 거절 당해서 main으로 되돌아감
+            // 일반 회원이면 거절 -> main
             return "redirect:/main";
         }
     }
 
-    // 상품 수정 페이지 - 어드민/판매자만 가능
+    // 상품 수정 페이지 - 판매자만 가능
     @GetMapping("/item/modify/{id}")
     public String itemModifyForm(@PathVariable("id") Integer id, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {
-        if(principalDetails.getUser().getRole().equals("ROLE_ADMIN") || (principalDetails.getUser().getRole().equals("ROLE_SELLER"))) {
-            // 어드민, 판매자
+        if(principalDetails.getUser().getRole().equals("ROLE_SELLER")) {
+            // 판매자
             User user = itemService.itemView(id).getSeller();
-            // 상품을 올린 판매자 id와 현재 로그인 중인 판매자의 id가 같을 때
+            // 상품을 올린 판매자 id와 현재 로그인 중인 판매자의 id가 같아야 수정 가능
             if(user.getId() == principalDetails.getUser().getId()) {
 
                 model.addAttribute("item", itemService.itemView(id));
                 model.addAttribute("user", principalDetails.getUser());
 
-
                 return "/seller/itemModify";
             } else {
                 return "redirect:/main";
             }
         } else {
-            // 일반 회원이면 거절 당해서 main으로 되돌아감
+            // 일반 회원이면 거절 -> main
             return "redirect:/main";
         }
     }
 
-    // 상품 수정 (POST) - 어드민/판매자만 가능
+    // 상품 수정 (POST) - 판매자만 가능
     @PostMapping("/item/modify/pro/{id}")
     public String itemModify(Item item, @PathVariable("id") Integer id, @AuthenticationPrincipal PrincipalDetails principalDetails, MultipartFile imgFile) throws Exception{
-
-        if(principalDetails.getUser().getRole().equals("ROLE_ADMIN") || (principalDetails.getUser().getRole().equals("ROLE_SELLER"))) {
-            // 어드민, 판매자
+        if(principalDetails.getUser().getRole().equals("ROLE_SELLER")) {
+            // 판매자
             User user = itemService.itemView(id).getSeller();
 
             if(user.getId() == principalDetails.getUser().getId()) {
-                // 아이템 등록자와, 로그인 유저가 같으면 수정 진행
+                // 상품을 올린 판매자 id와 현재 로그인 중인 판매자의 id가 같아야 수정 가능
                 itemService.itemModify(item, id, imgFile);
 
                 return "redirect:/main";
@@ -130,33 +131,42 @@
                 return "redirect:/main";
             }
         } else {
-            // 일반 회원이면 거절 당해서 main으로 되돌아감
+            // 일반 회원이면 거절 -> main
             return "redirect:/main";
         }
     }
 
-    // 상품 상세 페이지 - 어드민, 판매자, 구매자 가능
-    @GetMapping("/item/view/{id}")
-    public String ItemView(Model model, @PathVariable("id") Integer id, @AuthenticationPrincipal PrincipalDetails principalDetails) {
+    // 상품 상세 페이지 - 판매자, 구매자 가능
+    @GetMapping("/item/view/{itemId}")
+    public String ItemView(Model model, @PathVariable("itemId") Integer id, @AuthenticationPrincipal PrincipalDetails principalDetails) {
         if(principalDetails.getUser().getRole().equals("ROLE_SELLER")) {
-            // 어드민, 판매자
+            // 판매자
+            User user = principalDetails.getUser();
+
             model.addAttribute("item", itemService.itemView(id));
-            model.addAttribute("user", principalDetails.getUser());
-
-            return "itemView";
-        } else if (principalDetails.getUser().getRole().equals("ROLE_USER")) {
-            // 일반 회원
-            model.addAttribute("item", itemService.itemView(id));
-            model.addAttribute("user", principalDetails.getUser());
+            model.addAttribute("user", user);
 
             return "itemView";
         } else {
-            // 로그인 안 한 유저
+            // 구매자
+            User user = principalDetails.getUser();
+
+            // 페이지에 접속한 유저를 찾아야 함
+            User loginUser = userPageService.findUser(user.getId());
 
+            int cartCount = 0;
+            Cart userCart = cartService.findUserCart(loginUser.getId());
+            List<CartItem> cartItems = cartService.allUserCartView(userCart);
+
+            for(CartItem cartItem : cartItems) {
+                cartCount += cartItem.getCount();
+            }
+
+            model.addAttribute("cartCount", cartCount);
             model.addAttribute("item", itemService.itemView(id));
+            model.addAttribute("user", user);
 
             return "itemView";
-
         }
     }
 
@@ -169,15 +179,15 @@
 
     }
 
-    // 상품 삭제 - 어드민, 판매자만 가능
+    // 상품 삭제 - 판매자만 가능
     @GetMapping("/item/delete/{id}")
     public String itemDelete(@PathVariable("id") Integer id, @AuthenticationPrincipal PrincipalDetails principalDetails) {
         if(principalDetails.getUser().getRole().equals("ROLE_SELLER")) {
-            // 어드민, 판매자
+            // 판매자
             User user = itemService.itemView(id).getSeller();
 
             if(user.getId() == principalDetails.getUser().getId()) {
-
+                // 상품을 올린 판매자 id와 현재 로그인 중인 판매자의 id가 같아야 삭제 가능
                 itemService.itemDelete(id);
 
                 return "redirect:/main";
@@ -185,7 +195,7 @@
                 return "redirect:/main";
             }
         } else {
-            // 일반 회원이면 거절 당해서 main으로 되돌아감
+            // 일반 회원이면 거절 -> main
             return "redirect:/main";
         }
     }
@@ -195,6 +205,8 @@
     public String itemList(Model model, @PageableDefault(page = 0, size = 10, sort = "id", direction = Sort.Direction.ASC) Pageable pageable,
                            String searchKeyword, @AuthenticationPrincipal PrincipalDetails principalDetails) {
 
+        User user = userPageService.findUser(principalDetails.getUser().getId());
+
         Page<Item> items = null;
 
         if (searchKeyword == null) {  // 검색이 들어왔을 때
@@ -211,7 +223,7 @@
         model.addAttribute("nowPage", nowPage);
         model.addAttribute("startPage", startPage);
         model.addAttribute("endPage", endPage);
-        model.addAttribute("user", principalDetails.getUser());
+        model.addAttribute("user", user);
 
         return "itemList";
     }
Index: src/main/resources/templates/seller/itemManage.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/html\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n    <meta name=\"description\" content=\"\" />\r\n    <meta name=\"author\" content=\"\" />\r\n    <title th:text=\"|${seller.getName()}의 상품관리|\">상품관리</title>\r\n    <!-- Favicon-->\r\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"../../../../../../../Downloads/startbootstrap-shop-item-gh-pages/assets/favicon.ico\" />\r\n    <!-- Bootstrap icons-->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\" rel=\"stylesheet\" />\r\n    <!-- Core theme CSS (includes Bootstrap)-->\r\n    <link href=\"/css/styles.css\" rel=\"stylesheet\" />\r\n    <style>\r\n        .bd-placeholder-img {\r\n            font-size: 1.125rem;\r\n            text-anchor: middle;\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            user-select: none;\r\n        }\r\n\r\n        @media (min-width: 768px) {\r\n            .bd-placeholder-img-lg {\r\n                font-size: 3.5rem;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<!-- Navigation-->\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div class=\"container px-4 px-lg-5\">\r\n        <a class=\"navbar-brand\" th:href=\"@{/main}\">연지의 쇼핑몰</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4\">\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/main}\">Home</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/item/new}\">Upload</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/seller/manage/{id}(id=${seller.getId()})}\">Manage</a></li>\r\n\r\n                <!--<li class=\"nav-item dropdown\">\r\n                    <a class=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">Shop</a>\r\n                    <ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">All Products</a></li>\r\n                        <li><hr class=\"dropdown-divider\" /></li>\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">Popular Items</a></li>\r\n                        <li><a class=\"dropdown-item\" href=\"#!\">New Arrivals</a></li>\r\n                    </ul>\r\n                </li>-->\r\n            </ul>\r\n            <form class=\"d-flex\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재수익 : ${seller.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/seller/{id}(id=${seller.getId()})}\" th:text=\"|${seller.getName()}님 환영합니다.|\">\r\n                    판매자 페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</nav>\r\n<!---- Cart ---->\r\n<div class=\"container-fluid mt-3\">\r\n    <div class=\"row\">\r\n\r\n        <!-- SIDE BAR -->\r\n        <nav id=\"sidebarMenu\" class=\"col-md-3 col-lg-2 d-md-block bg-light sidebar collapse\">\r\n            <div class=\"position-sticky pt-3\">\r\n                <ul class=\"nav flex-column\">\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/seller/{id}(id=${seller.getId()})}\">\r\n                            <span data-feather=\"home\"></span>\r\n                            판매자페이지\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/seller/manage/{id}(id=${seller.getId()})}\">\r\n                            <span data-feather=\"home\"></span>\r\n                            상품관리\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" th:href=\"@{/seller/salelist/{id}(id=${seller.getId()})}\">\r\n                            <span data-feather=\"file\"></span>\r\n                            판매내역\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n\r\n\r\n\r\n\r\n        <main class=\"col-md-9 ms-sm-auto col-lg-10 px-md-4\">\r\n            <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                <h1 class=\"h2\">상품관리</h1>\r\n            </div>\r\n\r\n            <!--            <tr th:each=\"cart_item : ${cartItems}\">-->\r\n            <!--                <td th:text=\"${cart_item.getItem().getName()}\">카트에 담긴 물품명</td><br>-->\r\n            <!--            </tr>-->\r\n            <div class=\"table-responsive\">\r\n                <table class=\"table table-striped table-sm\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">번호</th>\r\n                        <th scope=\"col\">상품ID</th>\r\n                        <th scope=\"col\">상품명</th>\r\n                        <th scope=\"col\">가격</th>\r\n                        <th scope=\"col\">재고</th>\r\n                        <th scope=\"col\">등록날짜</th>\r\n                        <th scope=\"col\">삭제</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <tr th:each=\"useritem, i: ${userItem}\">\r\n                        <td th:text=\"${i.count}\">1</td>\r\n                        <td th:text=\"${useritem.getId()}\">3번상품</td>\r\n                        <td th:text=\"${useritem.getName()}\">상품명</td>\r\n                        <td th:text=\"${useritem.getPrice()}\">가격</td>\r\n                        <td th:text=\"${useritem.getStock()}\">재고</td>\r\n                        <td th:text=\"${useritem.getCreateDate()}\">등록날짜</td>\r\n                        <td class=\"btn btn-outline-dark\"><a th:href=\"@{/item/delete/{id}(id=${useritem.getId()})}\" style=\"text-decoration: none\">삭제</a></td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <hr>\r\n        </main>\r\n    </div>\r\n</div>\r\n<footer class=\"my-5 pt-5 text-muted text-center text-small\">\r\n    <p class=\"mb-1\">&copy; 김연지 - 2022년 01월 쇼핑몰 프로젝트</p>\r\n</footer>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/seller/itemManage.html b/src/main/resources/templates/seller/itemManage.html
--- a/src/main/resources/templates/seller/itemManage.html	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/resources/templates/seller/itemManage.html	(date 1643531282046)
@@ -39,16 +39,6 @@
                 <li class="nav-item"><a class="nav-link active" aria-current="page" th:href="@{/main}">Home</a></li>
                 <li class="nav-item"><a class="nav-link" href="#" th:href="@{/item/new}">Upload</a></li>
                 <li class="nav-item"><a class="nav-link" href="#" th:href="@{/seller/manage/{id}(id=${seller.getId()})}">Manage</a></li>
-
-                <!--<li class="nav-item dropdown">
-                    <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">Shop</a>
-                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
-                        <li><a class="dropdown-item" href="#!">All Products</a></li>
-                        <li><hr class="dropdown-divider" /></li>
-                        <li><a class="dropdown-item" href="#!">Popular Items</a></li>
-                        <li><a class="dropdown-item" href="#!">New Arrivals</a></li>
-                    </ul>
-                </li>-->
             </ul>
             <form class="d-flex">
                 <a class="btn btn-outline-dark" href="#" th:text="|현재수익 : ${seller.getCoin()} ₩|">
@@ -67,7 +57,6 @@
 <!---- Cart ---->
 <div class="container-fluid mt-3">
     <div class="row">
-
         <!-- SIDE BAR -->
         <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
             <div class="position-sticky pt-3">
@@ -93,18 +82,10 @@
                 </ul>
             </div>
         </nav>
-
-
-
-
         <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
             <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                 <h1 class="h2">상품관리</h1>
             </div>
-
-            <!--            <tr th:each="cart_item : ${cartItems}">-->
-            <!--                <td th:text="${cart_item.getItem().getName()}">카트에 담긴 물품명</td><br>-->
-            <!--            </tr>-->
             <div class="table-responsive">
                 <table class="table table-striped table-sm">
                     <thead>
Index: src/main/java/com/example/weblogin/domain/user/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.domain.user;\r\n\r\nimport com.example.weblogin.domain.user.User;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\n// <Entity, Entity-id>\r\npublic interface UserRepository extends JpaRepository<User, Integer> {\r\n    User findByUsername(String username);\r\n    User findById(int id);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/domain/user/UserRepository.java b/src/main/java/com/example/weblogin/domain/user/UserRepository.java
--- a/src/main/java/com/example/weblogin/domain/user/UserRepository.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/domain/user/UserRepository.java	(date 1643529103919)
@@ -1,9 +1,10 @@
 package com.example.weblogin.domain.user;
 
-import com.example.weblogin.domain.user.User;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
 
-// <Entity, Entity-id>
+
+@Repository
 public interface UserRepository extends JpaRepository<User, Integer> {
     User findByUsername(String username);
     User findById(int id);
Index: build/resources/main/templates/user/userCart.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/html\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n    <meta name=\"description\" content=\"\" />\r\n    <meta name=\"author\" content=\"\" />\r\n    <title th:text=\"|${user.getUsername()}의 장바구니|\">장바구니</title>\r\n    <!-- Favicon-->\r\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"../../../../../../../Downloads/startbootstrap-shop-item-gh-pages/assets/favicon.ico\" />\r\n    <!-- Bootstrap icons-->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\" rel=\"stylesheet\" />\r\n    <!-- Core theme CSS (includes Bootstrap)-->\r\n    <link href=\"/css/styles.css\" rel=\"stylesheet\" />\r\n    <style>\r\n        .bd-placeholder-img {\r\n            font-size: 1.125rem;\r\n            text-anchor: middle;\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            user-select: none;\r\n        }\r\n\r\n        @media (min-width: 768px) {\r\n            .bd-placeholder-img-lg {\r\n                font-size: 3.5rem;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<!-- Navigation-->\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div class=\"container px-4 px-lg-5\">\r\n        <a class=\"navbar-brand\" th:href=\"@{/main}\">연지의 쇼핑몰</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4\">\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/main}\">Home</a></li>\r\n            </ul>\r\n            <form class=\"d-flex\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재잔액 : ${user.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/user/cart/{id}(id=${user.getId()})}\">\r\n                    <i class=\"bi-cart-fill me-1\"></i>\r\n                    Cart\r\n                    <span class=\"badge bg-dark text-white ms-1 rounded-pill\" th:text=\"${user.getCart().getCount()}\">0</span>\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/user/{id}(id=${user.getId()})}\" th:text=\"|${user.getName()}님 환영합니다.|\">\r\n                    마이페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n</nav>\r\n<!---- Cart ---->\r\n<div class=\"container-fluid mt-3\">\r\n    <div class=\"row\">\r\n\r\n        <!-- SIDE BAR -->\r\n        <nav id=\"sidebarMenu\" class=\"col-md-3 col-lg-2 d-md-block bg-light sidebar collapse\">\r\n            <div class=\"position-sticky pt-3\">\r\n                <ul class=\"nav flex-column\">\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/user/{id}(id=${user.getId()})}\">\r\n                            <span data-feather=\"home\"></span>\r\n                            마이페이지\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/user/cart/{id}(id=${user.getId()})}\">\r\n                            <span data-feather=\"home\"></span>\r\n                            장바구니\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" th:href=\"@{/user/orderHist/{id}(id=${user.getId()})}\">\r\n                            <span data-feather=\"file\"></span>\r\n                            주문내역\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n        <main class=\"col-md-9 ms-sm-auto col-lg-10 px-md-4\">\r\n            <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                <h1 class=\"h2\">장바구니</h1>\r\n            </div>\r\n            <div class=\"table-responsive\">\r\n                <table class=\"table table-striped table-sm\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">번호</th>\r\n                        <th scope=\"col\">상품ID</th>\r\n                        <th scope=\"col\">상품명</th>\r\n                        <th scope=\"col\">수량</th>\r\n                        <th scope=\"col\">가격</th>\r\n                        <th scope=\"col\">담은날짜</th>\r\n                        <th scope=\"col\">삭제</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <tr th:each=\"cartItem, i: ${cartItems}\">\r\n                        <td th:text=\"${i.count}\">1</td>\r\n                        <td th:text=\"${cartItem.getItem().getId()}\">3번상품</td>\r\n                        <td th:text=\"${cartItem.getItem().getName()}\">상품명</td>\r\n                        <td th:text=\"${cartItem.getCount()}\">수량</td>\r\n                        <td th:text=\"${cartItem.getItem().getPrice() * cartItem.getCount()}\">가격</td>\r\n                        <td th:text=\"${cartItem.getCart().getCreateDate()}\">날짜</td>\r\n                        <td class=\"btn btn-outline-dark\"><a th:href=\"@{/user/cart/{id}/{cartItemId}/delete(id=${cartItem.getCart().getUser().id}, cartItemId=${cartItem.getId()})}\" style=\"text-decoration: none\">삭제</a></td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <hr>\r\n            <div class=\"row row-cols-1 row-cols-md-3 mb-3 text-center mt-3\">\r\n                <div class=\"col\">\r\n                    <div class=\"card mb-4 rounded-3 shadow-sm\">\r\n                        <div class=\"card-header py-3\">\r\n                            <h4 class=\"my-0 fw-normal\">총 수량</h4>\r\n                        </div>\r\n                        <form class=\"card-body\" method=\"post\">\r\n                            <h1 class=\"card-title pricing-card-title\" th:text=\"|${totalCount} 개|\">$0</h1>\r\n\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"row row-cols-1 row-cols-md-3 mb-3 text-center mt-3\">\r\n                <div class=\"col\">\r\n                    <div class=\"card mb-4 rounded-3 shadow-sm\">\r\n                        <div class=\"card-header py-3\">\r\n                            <h4 class=\"my-0 fw-normal\">총 결제금액</h4>\r\n                        </div>\r\n                        <form class=\"card-body\" th:action=\"@{/user/cart/checkout/{id}(id=${user.getId()})}\" method=\"post\">\r\n                            <h1 class=\"card-title pricing-card-title\" th:text=\"|${totalPrice} ₩|\">$0</h1>\r\n                            <ul class=\"list-unstyled mt-3 mb-4\">\r\n                                <li>잘못 담은 물건이 있는지 확인해보세요!</li>\r\n                            </ul>\r\n                            <button type=\"submit\" class=\"w-100 btn btn-lg btn-outline-primary\">구매하기</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    </div>\r\n</div>\r\n<footer class=\"my-5 pt-5 text-muted text-center text-small\">\r\n    <p class=\"mb-1\">&copy; 김연지 - 2022년 01월 쇼핑몰 프로젝트</p>\r\n</footer>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build/resources/main/templates/user/userCart.html b/build/resources/main/templates/user/userCart.html
--- a/build/resources/main/templates/user/userCart.html	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/build/resources/main/templates/user/userCart.html	(date 1643649033405)
@@ -125,7 +125,7 @@
                             <h4 class="my-0 fw-normal">총 수량</h4>
                         </div>
                         <form class="card-body" method="post">
-                            <h1 class="card-title pricing-card-title" th:text="|${totalCount} 개|">$0</h1>
+                            <h1 class="card-title pricing-card-title" th:text="|${user.getCart().getCount()} 개|">$0</h1>
 
                         </form>
                     </div>
Index: src/main/java/com/example/weblogin/service/AuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.service;\r\n\r\nimport com.example.weblogin.domain.sale.Sale;\r\nimport com.example.weblogin.domain.user.User;\r\nimport com.example.weblogin.domain.user.UserRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport javax.transaction.Transactional;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@RequiredArgsConstructor\r\n@Service\r\npublic class AuthService {\r\n    private final UserRepository userRepository;\r\n    private final BCryptPasswordEncoder bCryptPasswordEncoder;\r\n    private final CartService cartService;\r\n    private final OrderService orderService;\r\n    private final SaleService saleService;\r\n\r\n    @Transactional // Write(Insert, Update, Delete)\r\n    public User signup(User user) {\r\n        String rawPassword = user.getPassword();\r\n        String encPassword = bCryptPasswordEncoder.encode(rawPassword);\r\n        user.setPassword(encPassword);\r\n        user.setRole(\"ROLE_USER\");\r\n\r\n        User userEntity = userRepository.save(user);\r\n        if (user.getRole() == \"ROLE_SELLER\") {\r\n            saleService.createSale(user);\r\n        } else if (user.getRole() == \"ROLE_USER\"){\r\n            cartService.createCart(user);\r\n            orderService.createOrder(user);\r\n        }\r\n        return userEntity;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/service/AuthService.java b/src/main/java/com/example/weblogin/service/AuthService.java
--- a/src/main/java/com/example/weblogin/service/AuthService.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/service/AuthService.java	(date 1643564192695)
@@ -1,6 +1,5 @@
 package com.example.weblogin.service;
 
-import com.example.weblogin.domain.sale.Sale;
 import com.example.weblogin.domain.user.User;
 import com.example.weblogin.domain.user.UserRepository;
 import lombok.RequiredArgsConstructor;
@@ -8,33 +7,35 @@
 import org.springframework.stereotype.Service;
 
 import javax.transaction.Transactional;
-import java.util.ArrayList;
-import java.util.List;
+import java.util.Objects;
 
 @RequiredArgsConstructor
 @Service
 public class AuthService {
+
     private final UserRepository userRepository;
     private final BCryptPasswordEncoder bCryptPasswordEncoder;
     private final CartService cartService;
     private final OrderService orderService;
     private final SaleService saleService;
 
-    @Transactional // Write(Insert, Update, Delete)
+    @Transactional
     public User signup(User user) {
+
         String rawPassword = user.getPassword();
         String encPassword = bCryptPasswordEncoder.encode(rawPassword);
         user.setPassword(encPassword);
-        user.setRole("ROLE_USER");
+        user.setRole(user.getRole());
 
         User userEntity = userRepository.save(user);
-        if (user.getRole() == "ROLE_SELLER") {
+
+        if (Objects.equals(userEntity.getRole(), "ROLE_SELLER")) {
             saleService.createSale(user);
-        } else if (user.getRole() == "ROLE_USER"){
+        } else if (Objects.equals(user.getRole(), "ROLE_USER")){
             cartService.createCart(user);
             orderService.createOrder(user);
         }
+
         return userEntity;
     }
-
 }
Index: src/main/java/com/example/weblogin/domain/saleitem/SaleItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.domain.saleitem;\r\n\r\nimport com.example.weblogin.domain.cartitem.CartItem;\r\nimport com.example.weblogin.domain.orderitem.OrderItem;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.List;\r\n\r\npublic interface SaleItemRepository extends JpaRepository<SaleItem, Integer> {\r\n    List<SaleItem> findSaleItemsBySellerId(int sellerId);\r\n    List<SaleItem> findAll();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/domain/saleitem/SaleItemRepository.java b/src/main/java/com/example/weblogin/domain/saleitem/SaleItemRepository.java
--- a/src/main/java/com/example/weblogin/domain/saleitem/SaleItemRepository.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/domain/saleitem/SaleItemRepository.java	(date 1643552446461)
@@ -3,9 +3,11 @@
 import com.example.weblogin.domain.cartitem.CartItem;
 import com.example.weblogin.domain.orderitem.OrderItem;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
 
 import java.util.List;
 
+@Repository
 public interface SaleItemRepository extends JpaRepository<SaleItem, Integer> {
     List<SaleItem> findSaleItemsBySellerId(int sellerId);
     List<SaleItem> findAll();
Index: src/main/java/com/example/weblogin/domain/saleitem/SaleItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.domain.saleitem;\r\n\r\nimport com.example.weblogin.domain.item.Item;\r\nimport com.example.weblogin.domain.orderitem.OrderItem;\r\nimport com.example.weblogin.domain.sale.Sale;\r\nimport com.example.weblogin.domain.user.User;\r\nimport lombok.*;\r\nimport org.springframework.format.annotation.DateTimeFormat;\r\n\r\nimport javax.persistence.*;\r\nimport java.time.LocalDate;\r\n\r\n@Builder\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Getter\r\n@Setter\r\n@Entity\r\npublic class SaleItem {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private int id;\r\n\r\n    @ManyToOne(fetch = FetchType.EAGER)\r\n    @JoinColumn(name=\"sale_id\")\r\n    private Sale sale;\r\n\r\n    @ManyToOne(fetch = FetchType.EAGER)\r\n    @JoinColumn(name = \"seller_id\")\r\n    private User seller; // 판매자\r\n\r\n    @ManyToOne(fetch = FetchType.EAGER)\r\n    @JoinColumn(name=\"item_id\")\r\n    private Item item;\r\n\r\n    private int count=0; // 상품 개수\r\n\r\n    @OneToOne(mappedBy = \"saleItem\")\r\n    private OrderItem orderItem; // 판매 상품에 매핑되는 주문 상품\r\n\r\n    private int isCancel; // 판매 취소 여부 (0:판매완료 / 1:판매취소)\r\n\r\n    @DateTimeFormat(pattern = \"yyyy-mm-dd\")\r\n    private LocalDate createDate; // 날짜\r\n\r\n    @PrePersist\r\n    public void createDate(){\r\n        this.createDate = LocalDate.now();\r\n    }\r\n\r\n    public static SaleItem createSaleItem(Sale sale, User seller, Item item, int count) {\r\n        SaleItem saleItem = new SaleItem();\r\n        saleItem.setSale(sale);\r\n        saleItem.setItem(item);\r\n        saleItem.setSeller(seller);\r\n        saleItem.setCount(count);\r\n        return saleItem;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/domain/saleitem/SaleItem.java b/src/main/java/com/example/weblogin/domain/saleitem/SaleItem.java
--- a/src/main/java/com/example/weblogin/domain/saleitem/SaleItem.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/domain/saleitem/SaleItem.java	(date 1643561761455)
@@ -1,5 +1,6 @@
 package com.example.weblogin.domain.saleitem;
 
+import com.example.weblogin.domain.cartitem.CartItem;
 import com.example.weblogin.domain.item.Item;
 import com.example.weblogin.domain.orderitem.OrderItem;
 import com.example.weblogin.domain.sale.Sale;
@@ -30,11 +31,15 @@
     @JoinColumn(name = "seller_id")
     private User seller; // 판매자
 
-    @ManyToOne(fetch = FetchType.EAGER)
-    @JoinColumn(name="item_id")
-    private Item item;
+    //@ManyToOne(fetch = FetchType.EAGER)
+    //@JoinColumn(name="item_id")
+    //private Item item;
 
-    private int count=0; // 상품 개수
+    private int itemId; // 주문 상품 번호
+    private String itemName; // 주문 상품 이름
+    private int itemPrice; // 주문 상품 가격
+    private int itemCount; // 주문 상품 수량
+    private int itemTotalPrice; // 가격*수량
 
     @OneToOne(mappedBy = "saleItem")
     private OrderItem orderItem; // 판매 상품에 매핑되는 주문 상품
@@ -49,12 +54,29 @@
         this.createDate = LocalDate.now();
     }
 
-    public static SaleItem createSaleItem(Sale sale, User seller, Item item, int count) {
+    // 장바구니 전체 주문
+    public static SaleItem createSaleItem(int itemId, Sale sale, User seller, CartItem cartItem) {
+        SaleItem saleItem = new SaleItem();
+        saleItem.setItemId(itemId);
+        saleItem.setSale(sale);
+        saleItem.setSeller(seller);
+        saleItem.setItemName(cartItem.getItem().getName());
+        saleItem.setItemPrice(cartItem.getItem().getPrice());
+        saleItem.setItemCount(cartItem.getCount());
+        saleItem.setItemTotalPrice(cartItem.getItem().getPrice()*cartItem.getCount());
+        return saleItem;
+    }
+
+    // 상품 개별 주문
+    public static SaleItem createSaleItem(int itemId, Sale sale, User seller, Item item, int count) {
         SaleItem saleItem = new SaleItem();
+        saleItem.setItemId(itemId);
         saleItem.setSale(sale);
-        saleItem.setItem(item);
         saleItem.setSeller(seller);
-        saleItem.setCount(count);
+        saleItem.setItemName(item.getName());
+        saleItem.setItemPrice(item.getPrice());
+        saleItem.setItemCount(count);
+        saleItem.setItemTotalPrice(item.getPrice()*count);
         return saleItem;
     }
 }
Index: src/main/resources/templates/itemList.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/html\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n    <meta name=\"description\" content=\"\" />\r\n    <meta name=\"author\" content=\"\" />\r\n    <title>전체 상품 보기</title>\r\n    <!-- Bootstrap icons-->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\" rel=\"stylesheet\" />\r\n    <!-- Core theme CSS (includes Bootstrap)-->\r\n    <link href=\"/css/styles.css\" rel=\"stylesheet\" />\r\n</head>\r\n<body>\r\n<!-- Navigation-->\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div class=\"container px-4 px-lg-5\">\r\n        <a class=\"navbar-brand\" th:href=\"@{/main}\" sec:authorize=\"isAuthenticated()\">연지의 쇼핑몰</a>\r\n        <a class=\"navbar-brand\" th:href=\"@{/}\" sec:authorize=\"!isAuthenticated()\">연지의 쇼핑몰</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4\">\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/main}\" sec:authorize=\"isAuthenticated()\">Home</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/}\" sec:authorize=\"!isAuthenticated()\">Home</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/item/new}\" sec:authorize=\"hasRole('ROLE_SELLER')\">Upload</a></li>\r\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" th:href=\"@{/seller/manage/{id}(id=${user.getId()})}\" sec:authorize=\"hasRole('ROLE_SELLER')\">Manage</a></li>\r\n\r\n            </ul>\r\n            <form th:action=\"@{/signin}\" sec:authorize=\"!isAuthenticated()\">\r\n                <button class=\"btn btn-outline-dark\" type=\"submit\">\r\n                    로그인\r\n                </button>\r\n            </form>\r\n            <form th:action=\"@{/signup}\" sec:authorize=\"!isAuthenticated()\">\r\n                <button class=\"btn btn-outline-dark\" type=\"submit\">\r\n                    회원가입\r\n                </button>\r\n            </form>\r\n\r\n            <form class=\"d-flex\" sec:authorize=\"hasRole('ROLE_USER')\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재잔액 : ${user.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/user/cart/{id}(id=${user.getId()})}\">\r\n                    <i class=\"bi-cart-fill me-1\"></i>\r\n                    Cart\r\n                    <span class=\"badge bg-dark text-white ms-1 rounded-pill\" th:text=\"${user.getCart().getCount()}\">0</span>\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/seller/{id}(id=${user.getId()})}\" th:text=\"|${user.getName()}님 환영합니다.|\">\r\n                    마이페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n\r\n            <form class=\"d-flex\" sec:authorize=\"hasRole('ROLE_SELLER')\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재수익 : ${user.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/seller/{id}(id=${user.getId()})}\" th:text=\"|${user.getName()}님 환영합니다.|\">\r\n                    판매자 페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n            <form sec:authorize=\"isAuthenticated()\" th:action=\"@{/item/list}\" method=\"get\">\r\n                <input type=\"text\" name=\"searchKeyword\">\r\n                <button type=\"submit\">검색</button>\r\n            </form>\r\n            <form sec:authorize=\"!isAuthenticated()\" th:action=\"@{/nonlogin/item/list}\" method=\"get\">\r\n                <input type=\"text\" name=\"searchKeyword\">\r\n                <button type=\"submit\">검색</button>\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n</nav>\r\n\r\n\r\n<!-- Section-->\r\n<section class=\"py-5\">\r\n    <div class=\"container px-4 px-lg-5 mt-5\">\r\n        <div class=\"row gx-4 gx-lg-5 row-cols-2 row-cols-md-3 row-cols-xl-4 justify-content-center\">\r\n\r\n            <!-- 첫번째 아이템 -->\r\n            <div class=\"col mb-5\" th:each=\"item : ${items}\">\r\n                <div class=\"card h-100\">\r\n                    <!-- Product image-->\r\n                    <img class=\"card-img-top\" th:src=\"@{${item.getImgPath()}}\" alt=\"...\" />\r\n                    <!-- Product details-->\r\n                    <div class=\"card-body p-4\">\r\n                        <div class=\"text-center\">\r\n                            <!-- Product name\\-->\r\n                            <h5 class=\"fw-bolder\" th:text=\"${item.getName()}\">아이템이름</h5>\r\n                            <!-- Product price-->\r\n                            <p th:text=\"|${item.getPrice()} 원|\">아이템 가격</p>\r\n                        </div>\r\n                    </div>\r\n                    <!-- Product actions-->\r\n                    <div class=\"card-footer p-4 pt-0 border-top-0 bg-transparent\">\r\n                        <div class=\"text-center\"><a class=\"btn btn-outline-dark mt-auto\" th:href=\"@{/item/view/{id}(id=${item.getId()})}\">상세보기</a></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <th:block th:each=\"page : ${#numbers.sequence(startPage, endPage)}\">\r\n        <a th:if=\"${page != nowPage}\" th:href=\"@{/item/list(page = ${page - 1}, searchKeyword = ${param.searchKeyword})}\" th:text=\"${page}\"></a>\r\n        <strong th:if=\"${page == nowPage}\" th:text=\"${page}\" style=\"color : red\"></strong>\r\n    </th:block>\r\n</section>\r\n\r\n<!-- Footer-->\r\n<footer class=\"my-5 pt-5 text-muted text-center text-small\">\r\n    <p class=\"mb-1\">&copy; 김연지 - 2022년 01월 쇼핑몰 프로젝트</p>\r\n</footer>\r\n<!-- Bootstrap core JS-->\r\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\r\n<!-- Core theme JS-->\r\n<script src=\"/js/scripts.js\"></script>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/itemList.html b/src/main/resources/templates/itemList.html
--- a/src/main/resources/templates/itemList.html	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/resources/templates/itemList.html	(date 1643531416938)
@@ -10,6 +10,14 @@
     <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css" rel="stylesheet" />
     <!-- Core theme CSS (includes Bootstrap)-->
     <link href="/css/styles.css" rel="stylesheet" />
+    <style>
+        .page {
+            display: flex;
+            flex-direction: column;
+            justify-content: center;
+            align-items: center;
+        }
+    </style>
 </head>
 <body>
 <!-- Navigation-->
@@ -77,8 +85,6 @@
         </div>
     </div>
 </nav>
-
-
 <!-- Section-->
 <section class="py-5">
     <div class="container px-4 px-lg-5 mt-5">
@@ -106,10 +112,12 @@
             </div>
         </div>
     </div>
-    <th:block th:each="page : ${#numbers.sequence(startPage, endPage)}">
-        <a th:if="${page != nowPage}" th:href="@{/item/list(page = ${page - 1}, searchKeyword = ${param.searchKeyword})}" th:text="${page}"></a>
-        <strong th:if="${page == nowPage}" th:text="${page}" style="color : red"></strong>
-    </th:block>
+    <div class="page">
+        <th:block th:each="page : ${#numbers.sequence(startPage, endPage)}">
+            <a th:if="${page != nowPage}" th:href="@{/item/list(page = ${page - 1}, searchKeyword = ${param.searchKeyword})}" th:text="${page}"></a>
+            <strong th:if="${page == nowPage}" th:text="${page}" style="color : red"></strong>
+        </th:block>
+    </div>
 </section>
 
 <!-- Footer-->
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server.port=8080\r\n\r\nspring.datasource.driver-class-name=org.mariadb.jdbc.Driver\r\nspring.datasource.username=root\r\nspring.datasource.password=0118\r\nspring.datasource.url=jdbc:mysql://localhost:3306/shopstudy\r\n\r\n# create, update, none, create-drop, validate,\r\nspring.jpa.hibernate.ddl-auto=create\r\n\r\n## Jpa Properties\r\nspring.jpa.properties.hibernate.show_sql=true\r\nspring.jpa.properties.hibernate.format_sql=true\r\n\r\n## Logging Level\r\nlogging.level.org.hibernate.type.descriptor.sql=debug\r\n\r\nspring.security.user.name=root\r\nspring.security.user.password=root\r\nspring.security.user.roles=ADMIN\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/resources/application.properties	(date 1643574116906)
@@ -6,7 +6,7 @@
 spring.datasource.url=jdbc:mysql://localhost:3306/shopstudy
 
 # create, update, none, create-drop, validate,
-spring.jpa.hibernate.ddl-auto=create
+spring.jpa.hibernate.ddl-auto=update
 
 ## Jpa Properties
 spring.jpa.properties.hibernate.show_sql=true
Index: src/main/java/com/example/weblogin/controller/SellerPageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weblogin.controller;\r\n\r\nimport com.example.weblogin.config.auth.PrincipalDetails;\r\nimport com.example.weblogin.domain.item.Item;\r\nimport com.example.weblogin.domain.sale.Sale;\r\nimport com.example.weblogin.domain.saleitem.SaleItem;\r\nimport com.example.weblogin.service.ItemService;\r\nimport com.example.weblogin.service.OrderService;\r\nimport com.example.weblogin.service.SaleService;\r\nimport com.example.weblogin.service.UserPageService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n// 판매자에 해당하는 페이지 관리\r\n// 판매자페이지, 상품관리, 판매내역\r\n\r\n@RequiredArgsConstructor\r\n@Controller\r\npublic class SellerPageController {\r\n\r\n    private final UserPageService userPageService;\r\n    private final ItemService itemService;\r\n    private final SaleService saleService;\r\n\r\n    // 판매자 프로필 페이지 접속\r\n    @GetMapping(\"/seller/{id}\")\r\n    public String sellerPage(@PathVariable(\"id\") Integer id, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        if (principalDetails.getUser().getId() == id) {\r\n            // 로그인이 되어있는 판매자의 id와 판매자 페이지에 접속하는 id가 같아야 함\r\n            model.addAttribute(\"user\", userPageService.findUser(id));\r\n\r\n            return \"/seller/sellerPage\";\r\n        } else {\r\n            return \"redirect:/main\";\r\n        }\r\n\r\n    }\r\n\r\n    // 상품 관리 페이지\r\n    @GetMapping(\"/seller/manage/{id}\")\r\n    public String itemManage(@PathVariable(\"id\") Integer id, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        if(principalDetails.getUser().getId() == id) {\r\n            // 로그인이 되어있는 판매자의 id와 상품관리 페이지에 접속하는 id가 같아야 함\r\n            List<Item> allItem = itemService.allItemView();\r\n            List<Item> userItem = new ArrayList<>();\r\n\r\n            // 자신이 올린 상품만 가져오기\r\n            for(Item item : allItem) {\r\n                if(item.getSeller().getId() == id) {\r\n                    userItem.add(item);\r\n                }\r\n            }\r\n\r\n            model.addAttribute(\"seller\", userPageService.findUser(id));\r\n            model.addAttribute(\"userItem\", userItem);\r\n\r\n            return \"seller/itemManage\";\r\n        } else {\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n\r\n    // 판매 내역 조회 페이지\r\n    @GetMapping(\"/seller/salelist/{id}\")\r\n    public String saleList(@PathVariable(\"id\")Integer id, Model model, @AuthenticationPrincipal PrincipalDetails principalDetails) {\r\n        // 로그인이 되어있는 유저의 id와 판매내역에 접속하는 id가 같아야 함\r\n        if (principalDetails.getUser().getId() == id) {\r\n\r\n            Sale sales = saleService.findSaleById(id);\r\n            List<SaleItem> saleItemList = saleService.findSellerSaleItems(id);\r\n\r\n            // 총 판매 개수 += 수량\r\n            int totalCount = 0;\r\n            for (SaleItem saleItem : saleItemList) {\r\n                if (saleItem.getIsCancel() != 1)\r\n                    totalCount += saleItem.getCount();\r\n            }\r\n\r\n            model.addAttribute(\"sales\", sales);\r\n            model.addAttribute(\"totalCount\", totalCount);\r\n            model.addAttribute(\"sellerSaleItems\", saleItemList);\r\n            model.addAttribute(\"seller\", userPageService.findUser(id));\r\n\r\n            return \"seller/saleList\";\r\n        }\r\n        else {\r\n            return \"redirect:/main\";\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/weblogin/controller/SellerPageController.java b/src/main/java/com/example/weblogin/controller/SellerPageController.java
--- a/src/main/java/com/example/weblogin/controller/SellerPageController.java	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/java/com/example/weblogin/controller/SellerPageController.java	(date 1643565625015)
@@ -76,15 +76,8 @@
             Sale sales = saleService.findSaleById(id);
             List<SaleItem> saleItemList = saleService.findSellerSaleItems(id);
 
-            // 총 판매 개수 += 수량
-            int totalCount = 0;
-            for (SaleItem saleItem : saleItemList) {
-                if (saleItem.getIsCancel() != 1)
-                    totalCount += saleItem.getCount();
-            }
-
             model.addAttribute("sales", sales);
-            model.addAttribute("totalCount", totalCount);
+            model.addAttribute("totalCount", sales.getTotalCount());
             model.addAttribute("sellerSaleItems", saleItemList);
             model.addAttribute("seller", userPageService.findUser(id));
 
Index: src/main/resources/templates/user/userPage.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/html\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n    <meta name=\"description\" content=\"\" />\r\n    <meta name=\"author\" content=\"\" />\r\n    <title>마이페이지</title>\r\n    <!-- Bootstrap icons-->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\" rel=\"stylesheet\" />\r\n    <!-- Core theme CSS (includes Bootstrap)-->\r\n    <link href=\"/css/styles.css\" rel=\"stylesheet\" />\r\n\r\n    <style>\r\n        .bd-placeholder-img {\r\n            font-size: 1.125rem;\r\n            text-anchor: middle;\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            user-select: none;\r\n        }\r\n\r\n        @media (min-width: 768px) {\r\n            .bd-placeholder-img-lg {\r\n                font-size: 3.5rem;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<!-- Navigation-->\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div class=\"container px-4 px-lg-5\">\r\n        <a class=\"navbar-brand\" th:href=\"@{/main}\">연지의 쇼핑몰</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4\">\r\n                <li class=\"nav-item\"><a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/main}\">Home</a></li>\r\n\r\n            </ul>\r\n            <form class=\"d-flex\">\r\n                <a class=\"btn btn-outline-dark\" href=\"#\" th:text=\"|현재잔액 : ${user.getCoin()} ₩|\">\r\n                    현재잔액 : 10000 ₩\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/user/cart/{id}(id=${user.getId()})}\">\r\n                    <i class=\"bi-cart-fill me-1\"></i>\r\n                    Cart\r\n                    <span class=\"badge bg-dark text-white ms-1 rounded-pill\" th:text=\"${user.getCart().getCount()}\">0</span>\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/seller/{id}(id=${user.getId()})}\" th:text=\"|${user.getName()}님 환영합니다.|\">\r\n                    마이페이지\r\n                </a>\r\n                <a class=\"btn btn-outline-dark\" th:href=\"@{/logout}\">\r\n                    로그아웃\r\n                </a>\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n</nav>\r\n\r\n\r\n<!-- SIDE BAR -->\r\n<nav id=\"sidebarMenu\" class=\"col-md-3 col-lg-2 d-md-block bg-light sidebar collapse\">\r\n    <div class=\"position-sticky pt-3\">\r\n        <ul class=\"nav flex-column\">\r\n            <li class=\"nav-item\">\r\n                <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/user/{id}(id=${user.getId()})}\">\r\n                    <span data-feather=\"home\"></span>\r\n                    마이페이지\r\n                </a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n                <a class=\"nav-link active\" aria-current=\"page\" th:href=\"@{/user/cart/{id}(id=${user.getId()})}\">\r\n                    <span data-feather=\"home\"></span>\r\n                    장바구니\r\n                </a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n                <a class=\"nav-link\" th:href=\"@{/user/orderHist/{id}(id=${user.getId()})}\">\r\n                    <span data-feather=\"file\"></span>\r\n                    주문내역\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</nav>\r\n\r\n<main class=\"col-md-9 ms-sm-auto col-lg-10 px-md-4\">\r\n    <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n        <h1 class=\"h2\">마이페이지</h1>\r\n    </div>\r\n</main>\r\n\r\n<div class=\"container\">\r\n    <div class=\"main-body\">\r\n\r\n        <div class=\"row gutters-sm\">\r\n            <div class=\"col-md-4 mb-3\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"d-flex flex-column align-items-center text-center\">\r\n                            <img src=\"https://bootdey.com/img/Content/avatar/avatar7.png\" alt=\"Admin\" class=\"rounded-circle\" width=\"150\">\r\n                            <div class=\"mt-3\">\r\n                                <h4 th:text=\"${user.getUsername()}\">John Doe</h4>\r\n                                <!--<p class=\"text-secondary mb-1\" th:text=\"${user.getUsername()}\">닉네임</p>-->\r\n                                <!--<p class=\"text-muted font-size-sm\">회원등급</p>-->\r\n                                <a type=\"button\" class=\"btn btn-primary\" th:href=\"@{/user/modify/{id}(id=${user.id})}\">정보수정</a>\r\n                                <!--<button class=\"btn btn-outline-primary\" th:href=\"@{/#}\">주문내역</button>-->\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-md-8\">\r\n                <div class=\"card mb-3\">\r\n                    <div class=\"card-body\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-sm-3\">\r\n                                <h6 class=\"mb-0\">회원이름</h6>\r\n                            </div>\r\n                            <div class=\"col-sm-9 text-secondary\" th:text=\"${user.getName()}\">\r\n                                회원 이름\r\n                            </div>\r\n                        </div>\r\n                        <hr>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-sm-3\">\r\n                                <h6 class=\"mb-0\">닉네임</h6>\r\n                            </div>\r\n                            <div class=\"col-sm-9 text-secondary\" th:text=\"${user.getUsername()}\">\r\n                                회원 닉네임\r\n                            </div>\r\n                        </div>\r\n                        <hr>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-sm-3\">\r\n                                <h6 class=\"mb-0\">이메일</h6>\r\n                            </div>\r\n                            <div class=\"col-sm-9 text-secondary\" th:text=\"${user.getEmail()}\">\r\n                                회원 이메일\r\n                            </div>\r\n                        </div>\r\n                        <hr>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-sm-3\">\r\n                                <h6 class=\"mb-0\">전화번호</h6>\r\n                            </div>\r\n                            <div class=\"col-sm-9 text-secondary\" th:text=\"${user.getPhone()}\">\r\n                                (239) 816-9029\r\n                            </div>\r\n                        </div>\r\n                        <hr>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-sm-3\">\r\n                                <h6 class=\"mb-0\">주소</h6>\r\n                            </div>\r\n                            <div class=\"col-sm-9 text-secondary\" th:text=\"${user.getAddress()}\">\r\n                                회원 주소\r\n                            </div>\r\n                        </div>\r\n                        <hr>\r\n                        <!--<div class=\"row\">\r\n                            <div class=\"col-sm-12\">\r\n                                <a class=\"btn btn-info \" href=\"https://www.bootdey.com/snippets/view/profile-edit-data-and-skills\" th:href=\"@{#}\">회원정보 수정</a>\r\n                            </div>\r\n                        </div>-->\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n<footer class=\"my-5 pt-5 text-muted text-center text-small\">\r\n    <p class=\"mb-1\">&copy; 김연지 - 2022년 01월 쇼핑몰 프로젝트</p>\r\n</footer>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/user/userPage.html b/src/main/resources/templates/user/userPage.html
--- a/src/main/resources/templates/user/userPage.html	(revision 3a692539f7fb354763e25255e67136a952bf817e)
+++ b/src/main/resources/templates/user/userPage.html	(date 1643531282093)
@@ -103,10 +103,7 @@
                             <img src="https://bootdey.com/img/Content/avatar/avatar7.png" alt="Admin" class="rounded-circle" width="150">
                             <div class="mt-3">
                                 <h4 th:text="${user.getUsername()}">John Doe</h4>
-                                <!--<p class="text-secondary mb-1" th:text="${user.getUsername()}">닉네임</p>-->
-                                <!--<p class="text-muted font-size-sm">회원등급</p>-->
                                 <a type="button" class="btn btn-primary" th:href="@{/user/modify/{id}(id=${user.id})}">정보수정</a>
-                                <!--<button class="btn btn-outline-primary" th:href="@{/#}">주문내역</button>-->
                             </div>
                         </div>
                     </div>
@@ -160,11 +157,6 @@
                             </div>
                         </div>
                         <hr>
-                        <!--<div class="row">
-                            <div class="col-sm-12">
-                                <a class="btn btn-info " href="https://www.bootdey.com/snippets/view/profile-edit-data-and-skills" th:href="@{#}">회원정보 수정</a>
-                            </div>
-                        </div>-->
                     </div>
                 </div>
 
